<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sensirion.Validation</name>
    </assembly>
    <members>
        <member name="T:Sensirion.Validation.Affirm">
            <summary>
            <para>Commonly used for business logic validation checks without return a result.</para>
            <para>The idea of this validate class is to thrown <see cref="T:Sensirion.Validation.AffirmException"/> if does not match the criteria.</para>
            </summary>
        </member>
        <member name="M:Sensirion.Validation.Affirm.AffirmIsNotNull``1(``0,System.Func{System.String})">
            <summary>Affirm that <paramref name="parameter" /> is not null.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The parameter.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:Sensirion.Validation.AffirmException">When the <paramref name="parameter" /> is null.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Affirm.AffirmIsNull``1(``0,System.Func{System.String})">
            <summary>Affirm that <paramref name="parameter" /> is null.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The parameter.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:Sensirion.Validation.AffirmException">When the <paramref name="parameter" /> is null.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Affirm.AffirmHasValue``1(System.Nullable{``0},System.Func{System.String})">
            <summary>Affirm that <paramref name="parameter" /> has a value.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The <see cref="T:System.Nullable`1">nullable</see> parameter.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:Sensirion.Validation.AffirmException">When the <paramref name="parameter" /> is null.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Affirm.AffirmIsNotNullOrEmpty(System.String,System.Func{System.String})">
            <summary>Affirm that the String '<paramref name="parameter" />' is not null or empty.</summary>
            <param name="parameter">The parameter.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:Sensirion.Validation.AffirmException">When the String '<paramref name="parameter" />' is null or empty.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Affirm.AffirmIsNotNullOrWhiteSpace(System.String,System.Func{System.String})">
            <summary>Affirm that the String '<paramref name="parameter" />' is not null, white space or empty.</summary>
            <param name="parameter">The parameter.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:Sensirion.Validation.AffirmException">When the String '<paramref name="parameter" />' is null or whitespace.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Affirm.AffirmIsGreaterThan``1(``0,``0,System.Func{System.String})">
            <summary>Affirm that the specified <paramref name="parameter" /> is greater than <paramref name="minimum" />.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The value.</param>
            <param name="minimum">The minimum.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:Sensirion.Validation.AffirmException">When the <paramref name="parameter" /> is not greater than <paramref name="minimum" /></exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Affirm.AffirmIsGreaterThanOrEqualsTo``1(``0,``0,System.Func{System.String})">
            <summary>Affirm that the specified <paramref name="parameter" /> is greater than or equals to <paramref name="minimum" />.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The value.</param>
            <param name="minimum">The minimum.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:Sensirion.Validation.AffirmException">When the <paramref name="parameter" /> is not greater than or equal to <paramref name="minimum" /></exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Affirm.AffirmIsLessThan``1(``0,``0,System.Func{System.String})">
            <summary>Affirm that the specified <paramref name="parameter"/> is less than <paramref name="maximum"/>.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The value.</param>
            <param name="maximum">The maximum.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:Sensirion.Validation.AffirmException">When the <paramref name="parameter" /> is not less than <paramref name="maximum" /></exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Affirm.AffirmIsLessThanOrEqualsTo``1(``0,``0,System.Func{System.String})">
            <summary>Affirm that the specified <paramref name="parameter" /> is less than or equals to <paramref name="maximum" />.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The value.</param>
            <param name="maximum">The maximum.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:Sensirion.Validation.AffirmException">When the <paramref name="parameter" /> is not less than or equal to <paramref name="maximum" /></exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Affirm.AffirmInRangeIncludeLowerIncludeUpper``1(``0,``0,``0,System.Func{System.String})">
            <summary>Affirms that the <paramref name="value" /> is inside of defined range [<paramref name="lowerBound" />, <paramref name="upperBound" />]</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="lowerBound">The lower bound.</param>
            <param name="value">The value.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:Sensirion.Validation.AffirmException">If <paramref name="value"/> is not inside of defined range.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
            <exception cref="T:System.FormatException"><paramref name="value" /> is not in an appropriate format for a <see cref="T:System.Double" /> type.</exception>
            <exception cref="T:System.InvalidCastException"><paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface. -or-The conversion is not supported.</exception>
            <exception cref="T:System.OverflowException"><paramref name="value" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
        </member>
        <member name="M:Sensirion.Validation.Affirm.AffirmInRangeIncludeLowerExcludeUpper``1(``0,``0,``0,System.Func{System.String})">
            <summary>Affirms that the <paramref name="value" /> is inside of defined range [<paramref name="lowerBound" />, <paramref name="upperBound" />[</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="lowerBound">The lower bound.</param>
            <param name="value">The value.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:Sensirion.Validation.AffirmException">If <paramref name="value"/> is not inside of defined range.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
            <exception cref="T:System.InvalidCastException"><paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface. -or-The conversion is not supported.</exception>
            <exception cref="T:System.OverflowException"><paramref name="value" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
            <exception cref="T:System.FormatException"><paramref name="value" /> is not in an appropriate format for a <see cref="T:System.Double" /> type.</exception>
        </member>
        <member name="M:Sensirion.Validation.Affirm.AffirmInRangeExcludeLowerIncludeUpper``1(``0,``0,``0,System.Func{System.String})">
            <summary>Affirms that the <paramref name="value" /> is inside of defined range ]<paramref name="lowerBound" />, <paramref name="upperBound" />]</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="lowerBound">The lower bound.</param>
            <param name="value">The value.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:Sensirion.Validation.AffirmException">If <paramref name="value"/> is not inside of defined range.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
            <exception cref="T:System.InvalidCastException"><paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface. -or-The conversion is not supported.</exception>
            <exception cref="T:System.OverflowException"><paramref name="value" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
            <exception cref="T:System.FormatException"><paramref name="value" /> is not in an appropriate format for a <see cref="T:System.Double" /> type.</exception>
        </member>
        <member name="M:Sensirion.Validation.Affirm.AffirmInRangeExcludeLowerExcludeUpper``1(``0,``0,``0,System.Func{System.String})">
            <summary>Affirms that the <paramref name="value" /> is inside of defined range ]<paramref name="lowerBound" />, <paramref name="upperBound" />[</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="lowerBound">The lower bound.</param>
            <param name="value">The value.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:Sensirion.Validation.AffirmException">If <paramref name="value"/> is not inside of defined range.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
            <exception cref="T:System.FormatException">
                    <paramref name="value" /> is not in an appropriate format for a <see cref="T:System.Double" /> type.</exception>
            <exception cref="T:System.InvalidCastException">
                    <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface. -or-The conversion is not supported.</exception>
            <exception cref="T:System.OverflowException">
                    <paramref name="value" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
        </member>
        <member name="M:Sensirion.Validation.Affirm.AffirmIsTrue(System.Boolean,System.Func{System.String})">
            <summary>Affirm that the specified <paramref name="parameter"/> is true.</summary>
            <param name="parameter">Value to check if is true</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:Sensirion.Validation.AffirmException">If <paramref name="parameter"/> is false</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Affirm.AffirmIsFalse(System.Boolean,System.Func{System.String})">
            <summary>Affirm that the specified <paramref name="parameter"/> is false.</summary>
            <param name="parameter">Value to check if is false</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:Sensirion.Validation.AffirmException">If <paramref name="parameter"/> is true</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Affirm.AffirmMatches(System.String,System.Text.RegularExpressions.Regex,System.Func{System.String})">
            <summary>Affirm that the specified <paramref name="parameter"/> matches with <paramref name="regex"/>.</summary>
            <param name="parameter">The parameter value.</param>
            <param name="regex">The regex.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:Sensirion.Validation.AffirmException">When the specified <paramref name="parameter"/> does not match with <paramref name="regex"/></exception>
            <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Affirm.AffirmDoesNotMatch(System.String,System.Text.RegularExpressions.Regex,System.Func{System.String})">
            <summary>Affirm that the specified <paramref name="parameter" /> doesn't match with <paramref name="regex" />.</summary>
            <param name="parameter">The parameter value.</param>
            <param name="regex">The regex.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:Sensirion.Validation.AffirmException">When the specified <paramref name="parameter"/> matches with <paramref name="regex"/></exception>
            <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Affirm.AffirmAreEqual``1(System.IEquatable{``0},System.IEquatable{``0},System.Func{System.String})">
            <summary>Affirm that <paramref name="leftParameterValue" /> is equal to <paramref name="rightParameterValue" /> by using methods on <see cref="T:System.IEquatable`1" />.</summary>
            <typeparam name="TCompare">The type of the compare.</typeparam>
            <param name="leftParameterValue">The left parameter value.</param>
            <param name="rightParameterValue">The right parameter value.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:Sensirion.Validation.AffirmException">If <paramref name="leftParameterValue" /> is not equal to <paramref name="rightParameterValue" /></exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Affirm.AffirmAreNotEqual``1(System.IEquatable{``0},System.IEquatable{``0},System.Func{System.String})">
            <summary>Affirm that <paramref name="leftParameterValue" /> is not equal to <paramref name="rightParameterValue" /> by using methods on <see cref="T:System.IEquatable`1" />.</summary>
            <typeparam name="TCompare">The type of the compare.</typeparam>
            <param name="leftParameterValue">The left parameter value.</param>
            <param name="rightParameterValue">The right parameter value.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:Sensirion.Validation.AffirmException">When <paramref name="leftParameterValue"/> is different from <paramref name="rightParameterValue"/>.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Affirm.AffirmFileExists(System.String,System.Func{System.String})">
            <summary>Affirm that the specified file path exists.</summary>
            <param name="filePath">The file path.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:Sensirion.Validation.AffirmException">If file doesn't exist</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Affirm.AffirmExactlyOneElement``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.String})">
            <summary>Affirm that <paramref name="elements" /> contains exactly one element.</summary>
            <param name="elements">The elements to check.</param>
            <param name="elementDescription">The custom message.</param>
            <exception cref="T:Sensirion.Validation.AffirmException">If file doesn't exist</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Affirm.AffirmXmlIsValid(System.Xml.Linq.XDocument,System.Xml.Schema.XmlSchemaSet)">
            <summary>Affirm that the Xml document <paramref name="aXDocument"/> is valid with respect to the xsd schema in <paramref name="aXmlSchemaSet"/> </summary>
            <param name="aXDocument">The Xml document to check</param>
            <param name="aXmlSchemaSet">The Xsd schema to check against</param>
            <remarks>For some reason, when using a Schema that includes other schemas, one has to initialize the XmlSchemaSet with the file path,
            and not with a Stream source. Otherwise the included schema is not resolved correctly</remarks>
            <exception cref="T:Sensirion.Validation.AffirmException">If the Xsd validation fails</exception>
            <exception cref="T:System.ArgumentNullException">If any of the input arguments are null</exception>
        </member>
        <member name="M:Sensirion.Validation.Affirm.AffirmXmlIsValid(System.Xml.Linq.XDocument,System.Xml.Schema.XmlSchemaSet,System.Func{System.String,System.String})">
            <summary>Affirm that the Xml document <paramref name="aXDocument"/> is valid with respect to the xsd schema in <paramref name="aXmlSchemaSet"/> </summary>
            <param name="aXDocument">The Xml document to check</param>
            <param name="aXmlSchemaSet">The Xsd schema to check against</param>
            <param name="aCustomErrorMessage">A custom error message to display on validation errors</param>
            <remarks>For some reason, when using a Schema that includes other schemas, one has to initialize the XmlSchemaSet with the file path,
            and not with a Stream source. Otherwise the included schema is not resolved correctly</remarks>
            <exception cref="T:Sensirion.Validation.AffirmException">If the Xsd validation fails</exception>
            <exception cref="T:System.ArgumentNullException">If any of the input arguments are null</exception>
        </member>
        <member name="M:Sensirion.Validation.Affirm.AffirmXmlIsValid(System.String,System.String,System.String)">
            <summary>Affirm that the Xml document in <paramref name="aXmlFilePath"/> is valid with respect to the Xsd schema in <paramref name="aXsdFilePath"/> </summary>
            <param name="aXmlFilePath">The path to the Xml document</param>
            <param name="aXsdFilePath">The path to the Xsd Schema </param>
            <param name="aTargetNameSpace">The target namespace of the Xml document, must be agree with the namespace in both the Xml and Xsd files. For no namespace, use null</param>
            <exception cref="T:Sensirion.Validation.AffirmException">If the Xsd validation fails</exception>
            <exception cref="T:System.ArgumentNullException">If any of the input arguments except <paramref name="aTargetNameSpace"/> are null</exception>
        </member>
        <member name="M:Sensirion.Validation.Affirm.AffirmXmlIsValid(System.String,System.String,System.Func{System.String,System.String},System.String)">
            <summary>Affirm that the Xml document in <paramref name="aXmlFilePath"/> is valid with respect to the Xsd schema in <paramref name="aXsdFilePath"/> </summary>
            <param name="aXmlFilePath">The path to the Xml document</param>
            <param name="aXsdFilePath">The path to the Xsd Schema </param>
            <param name="aTargetNameSpace">The target namespace of the Xml document, must be agree with the namespace in both the Xml and Xsd files. For no namespace, use null</param>
            /// <param name="aCustomErrorMessage">A custom error message to display on validation errors</param>
            <exception cref="T:Sensirion.Validation.AffirmException">If the Xsd validation fails</exception>
            <exception cref="T:System.ArgumentNullException">If any of the input arguments except <paramref name="aTargetNameSpace"/> are null</exception>
        </member>
        <member name="T:Sensirion.Validation.AffirmException">
            <summary>Exception to be thrown when validation fails (Used on <see cref="T:Sensirion.Validation.Affirm" /></summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Sensirion.Validation.AffirmException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Sensirion.Validation.AffirmException"/> class.</summary>
        </member>
        <member name="M:Sensirion.Validation.AffirmException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Sensirion.Validation.AffirmException"/> class.</summary>
            <param name="message">exception message</param>
        </member>
        <member name="M:Sensirion.Validation.AffirmException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Sensirion.Validation.AffirmException" /> class.</summary>
            <param name="message">exception message</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Sensirion.Validation.AffirmException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:Sensirion.Validation.AffirmException"/> class.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
        </member>
        <member name="T:Sensirion.Validation.Ensure">
            <summary>Commonly used validation checks.</summary>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureIsNotNull``1(``0)">
            <summary>Ensure that <paramref name="parameter" /> is not null.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The parameter.</param>
            <returns><paramref name="parameter"/></returns>
            <exception cref="T:System.ArgumentNullException">When the <paramref name="parameter" /> is null.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureIsNotNull``1(``0,System.String)">
            <summary>Ensure that <paramref name="parameter" /> is not null.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The parameter.</param>
            <param name="parameterName">Name of the parameter.</param>
            <returns><paramref name="parameter"/></returns>
            <exception cref="T:System.ArgumentNullException">When the <paramref name="parameter" /> is null.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureIsNotNull``1(``0,System.String,System.Func{System.String})">
            <summary>Ensure that <paramref name="parameter" /> is not null.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The parameter.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <returns><paramref name="parameter"/></returns>
            <exception cref="T:System.ArgumentNullException">When the <paramref name="parameter" /> is null.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureIsNotNull``1(``0,System.String,System.Func{System.String,System.String})">
            <summary>Ensure that <paramref name="parameter" /> is not null.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The parameter.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <returns><paramref name="parameter"/></returns>
            <exception cref="T:System.ArgumentNullException">When the <paramref name="parameter" /> is null.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureIsNotNullOrEmpty(System.String)">
            <summary>Ensure that the String '<paramref name="parameter" />' is not null or empty.</summary>
            <param name="parameter">The parameter.</param>
            <returns><paramref name="parameter"/></returns>
            <exception cref="T:System.ArgumentNullException">When the String '<paramref name="parameter" />' is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">When the String '<paramref name="parameter" />' is empty.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureIsNotNullOrEmpty(System.String,System.String)">
            <summary>Ensure that the String '<paramref name="parameter" />' is not null or empty.</summary>
            <param name="parameter">The parameter.</param>
            <param name="parameterName">Name of the parameter.</param>
            <returns><paramref name="parameter"/></returns>
            <exception cref="T:System.ArgumentNullException">When the String '<paramref name="parameter" />' is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">When the String '<paramref name="parameter" />' is empty.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureIsNotNullOrEmpty(System.String,System.String,System.Func{System.String})">
            <summary>Ensure that the String '<paramref name="parameter" />' is not null or empty.</summary>
            <param name="parameter">The parameter.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <returns><paramref name="parameter"/></returns>
            <exception cref="T:System.ArgumentNullException">When the String '<paramref name="parameter" />' is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">When the String '<paramref name="parameter" />' is empty.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureIsNotNullOrEmpty(System.String,System.String,System.Func{System.String,System.String})">
            <summary>Ensure that the String '<paramref name="parameter" />' is not null or empty.</summary>
            <param name="parameter">The parameter.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <returns><paramref name="parameter"/></returns>
            <exception cref="T:System.ArgumentNullException">When the String '<paramref name="parameter" />' is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">When the String '<paramref name="parameter" />' is empty.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureIsNotNullOrWhiteSpace(System.String)">
            <summary>Ensure that the String '<paramref name="parameter" />' is not null, white space or empty.</summary>
            <param name="parameter">The parameter.</param>
            <returns><paramref name="parameter"/></returns>
            <exception cref="T:System.ArgumentNullException">When the String '<paramref name="parameter" />' is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">When the String '<paramref name="parameter" />' is white space or empty.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureIsNotNullOrWhiteSpace(System.String,System.String)">
            <summary>Ensure that the String '<paramref name="parameter" />' is not null, white space or empty.</summary>
            <param name="parameter">The parameter.</param>
            <param name="parameterName">Name of the parameter.</param>
            <returns><paramref name="parameter"/></returns>
            <exception cref="T:System.ArgumentNullException">When the String '<paramref name="parameter" />' is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">When the String '<paramref name="parameter" />' is white space or empty.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureIsNotNullOrWhiteSpace(System.String,System.String,System.Func{System.String})">
            <summary>Ensure that the String '<paramref name="parameter" />' is not null, white space or empty.</summary>
            <param name="parameter">The parameter.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <returns><paramref name="parameter"/></returns>
            <exception cref="T:System.ArgumentNullException">When the String '<paramref name="parameter" />' is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">When the String '<paramref name="parameter" />' is white space or empty.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureIsNotNullOrWhiteSpace(System.String,System.String,System.Func{System.String,System.String})">
            <summary>Ensure that the String '<paramref name="parameter" />' is not null, white space or empty.</summary>
            <param name="parameter">The parameter.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <returns><paramref name="parameter"/></returns>
            <exception cref="T:System.ArgumentNullException">When the String '<paramref name="parameter" />' is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">When the String '<paramref name="parameter" />' is white space or empty.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureHasValue``1(System.Nullable{``0})">
            <summary>Affirm that the <see cref="T:System.Nullable`1">nullable</see> <paramref name="parameter"/> has a value.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The <see cref="T:System.Nullable`1">nullable</see> parameter.</param>
            <exception cref="T:Sensirion.Validation.AffirmException">When the <paramref name="parameter" /> is null.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureHasValue``1(System.Nullable{``0},System.String)">
            <summary>Affirm that the <see cref="T:System.Nullable`1">nullable</see> <paramref name="parameter"/> has a value.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The <see cref="T:System.Nullable`1">nullable</see> parameter.</param>
            <param name="parameterName">Name of the parameter.</param>
            <exception cref="T:Sensirion.Validation.AffirmException">When the <paramref name="parameter" /> is null.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureHasValue``1(System.Nullable{``0},System.String,System.Func{System.String})">
            <summary>Affirm that the <see cref="T:System.Nullable`1">nullable</see> <paramref name="parameter"/> has a value.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The <see cref="T:System.Nullable`1">nullable</see> parameter.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:Sensirion.Validation.AffirmException">When the <paramref name="parameter" /> is null.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureHasValue``1(System.Nullable{``0},System.String,System.Func{System.String,System.String})">
            <summary>Affirm that the <see cref="T:System.Nullable`1">nullable</see> <paramref name="parameter"/> has a value.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The <see cref="T:System.Nullable`1">nullable</see> parameter.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:Sensirion.Validation.AffirmException">When the <paramref name="parameter" /> is null.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureIsGreaterThan``1(``0,``0)">
            <summary>Ensure if the specified <paramref name="parameter" /> is greater than <paramref name="minimum" />.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The parameter.</param>
            <param name="minimum">The minimum.</param>
            <returns><paramref name="parameter"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">When the <paramref name="parameter" /> is not greater than <paramref name="minimum" /></exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureIsGreaterThan``1(``0,``0,System.String)">
            <summary>Ensure if the specified <paramref name="parameter" /> is greater than <paramref name="minimum" />.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The parameter.</param>
            <param name="minimum">The minimum.</param>
            <param name="parameterName">Name of the parameter.</param>
            <returns><paramref name="parameter"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">When the <paramref name="parameter" /> is not greater than <paramref name="minimum" /></exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureIsGreaterThan``1(``0,``0,System.String,System.Func{System.String})">
            <summary>Ensure if the specified <paramref name="parameter" /> is greater than <paramref name="minimum" />.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The parameter.</param>
            <param name="minimum">The minimum.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <returns><paramref name="parameter"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">When the <paramref name="parameter" /> is not greater than <paramref name="minimum" /></exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureIsGreaterThan``1(``0,``0,System.String,System.Func{System.String,System.String})">
            <summary>Ensure if the specified <paramref name="parameter" /> is greater than <paramref name="minimum" />.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The value.</param>
            <param name="minimum">The minimum.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <returns><paramref name="parameter"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">When the <paramref name="parameter" /> is not greater than <paramref name="minimum" /></exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureIsGreaterThanOrEqualsTo``1(``0,``0)">
            <summary>Ensure if the specified <paramref name="parameter" /> is greater than or equals to <paramref name="minimum" />.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The parameter.</param>
            <param name="minimum">The minimum.</param>
            <returns><paramref name="parameter"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">When the <paramref name="parameter" /> is not greater than or equal to <paramref name="minimum" /></exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureIsGreaterThanOrEqualsTo``1(``0,``0,System.String)">
            <summary>Ensure if the specified <paramref name="parameter" /> is greater than or equals to <paramref name="minimum" />.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The parameter.</param>
            <param name="minimum">The minimum.</param>
            <param name="parameterName">Name of the parameter.</param>
            <returns><paramref name="parameter"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">When the <paramref name="parameter" /> is not greater than or equal to <paramref name="minimum" /></exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureIsGreaterThanOrEqualsTo``1(``0,``0,System.String,System.Func{System.String})">
            <summary>Ensure if the specified <paramref name="parameter" /> is greater than or equals to <paramref name="minimum" />.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The parameter.</param>
            <param name="minimum">The minimum.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <returns><paramref name="parameter"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">When the <paramref name="parameter" /> is not greater than or equal to <paramref name="minimum" /></exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureIsGreaterThanOrEqualsTo``1(``0,``0,System.String,System.Func{System.String,System.String})">
            <summary>Ensure if the specified <paramref name="parameter" /> is greater than or equals to <paramref name="minimum" />.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The value.</param>
            <param name="minimum">The minimum.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <returns><paramref name="parameter"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">When the <paramref name="parameter" /> is not greater than or equal to <paramref name="minimum" /></exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureIsLessThan``1(``0,``0)">
            <summary>Determines whether the specified <paramref name="parameter"/> is less than <paramref name="maximum"/>.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The parameter.</param>
            <param name="maximum">The maximum.</param>
            <returns><paramref name="parameter"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">When the <paramref name="parameter" /> is not less than <paramref name="maximum" /></exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureIsLessThan``1(``0,``0,System.String)">
            <summary>Determines whether the specified <paramref name="parameter"/> is less than <paramref name="maximum"/>.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The parameter.</param>
            <param name="maximum">The maximum.</param>
            <param name="parameterName">Name of the parameter.</param>
            <returns><paramref name="parameter"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">When the <paramref name="parameter" /> is not less than <paramref name="maximum" /></exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureIsLessThan``1(``0,``0,System.String,System.Func{System.String})">
            <summary>Determines whether the specified <paramref name="parameter"/> is less than <paramref name="maximum"/>.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The parameter.</param>
            <param name="maximum">The maximum.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <returns><paramref name="parameter"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">When the <paramref name="parameter" /> is not less than <paramref name="maximum" /></exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureIsLessThan``1(``0,``0,System.String,System.Func{System.String,System.String})">
            <summary>Determines whether the specified <paramref name="parameter"/> is less than <paramref name="maximum"/>.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The value.</param>
            <param name="maximum">The maximum.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <returns><paramref name="parameter"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">When the <paramref name="parameter" /> is not less than <paramref name="maximum" /></exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureIsLessThanOrEqualsTo``1(``0,``0)">
            <summary>Ensure if the specified <paramref name="parameter" /> is less than or equals to <paramref name="maximum" />.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The parameter.</param>
            <param name="maximum">The maximum.</param>
            <returns><paramref name="parameter"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">When the <paramref name="parameter" /> is not less than or equal to <paramref name="maximum" /></exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureIsLessThanOrEqualsTo``1(``0,``0,System.String)">
            <summary>Ensure if the specified <paramref name="parameter" /> is less than or equals to <paramref name="maximum" />.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The parameter.</param>
            <param name="maximum">The maximum.</param>
            <param name="parameterName">Name of the parameter.</param>
            <returns><paramref name="parameter"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">When the <paramref name="parameter" /> is not less than or equal to <paramref name="maximum" /></exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureIsLessThanOrEqualsTo``1(``0,``0,System.String,System.Func{System.String})">
            <summary>Ensure if the specified <paramref name="parameter" /> is less than or equals to <paramref name="maximum" />.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The parameter.</param>
            <param name="maximum">The maximum.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <returns><paramref name="parameter"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">When the <paramref name="parameter" /> is not less than or equal to <paramref name="maximum" /></exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureIsLessThanOrEqualsTo``1(``0,``0,System.String,System.Func{System.String,System.String})">
            <summary>Ensure if the specified <paramref name="parameter" /> is less than or equals to <paramref name="maximum" />.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The value.</param>
            <param name="maximum">The maximum.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <returns><paramref name="parameter"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">When the <paramref name="parameter" /> is not less than or equal to <paramref name="maximum" /></exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureInRangeIncludeLowerIncludeUpper``1(``0,``0,``0)">
            <summary>Ensures if the <paramref name="value" /> is inside of defined range [<paramref name="lowerBound" />, <paramref name="upperBound" />]</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="lowerBound">The lower bound.</param>
            <param name="value">The value.</param>
            <param name="upperBound">The upper bound.</param>
            <returns><paramref name="value"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="value"/> is not inside of defined range.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureInRangeIncludeLowerIncludeUpper``1(``0,``0,``0,System.String)">
            <summary>Ensures if the <paramref name="value" /> is inside of defined range [<paramref name="lowerBound" />, <paramref name="upperBound" />]</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="lowerBound">The lower bound.</param>
            <param name="value">The value.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="parameterName">Name of the parameter.</param>
            <returns><paramref name="value"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="value"/> is not inside of defined range.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureInRangeIncludeLowerIncludeUpper``1(``0,``0,``0,System.String,System.Func{System.String})">
            <summary>Ensures if the <paramref name="value" /> is inside of defined range [<paramref name="lowerBound" />, <paramref name="upperBound" />]</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="lowerBound">The lower bound.</param>
            <param name="value">The value.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <returns><paramref name="value"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="value"/> is not inside of defined range.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureInRangeIncludeLowerIncludeUpper``1(``0,``0,``0,System.String,System.Func{System.String,System.String})">
            <summary>Ensures if the <paramref name="value" /> is inside of defined range [<paramref name="lowerBound" />, <paramref name="upperBound" />]</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="lowerBound">The lower bound.</param>
            <param name="value">The value.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <returns><paramref name="value"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="value"/> is not inside of defined range.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureInRangeIncludeLowerExcludeUpper``1(``0,``0,``0)">
            <summary>Ensures if the <paramref name="value" /> is inside of defined range [<paramref name="lowerBound" />, <paramref name="upperBound" />[</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="lowerBound">The lower bound.</param>
            <param name="value">The value.</param>
            <param name="upperBound">The upper bound.</param>
            <returns><paramref name="value"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="value"/> is not inside of defined range.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureInRangeIncludeLowerExcludeUpper``1(``0,``0,``0,System.String)">
            <summary>Ensures if the <paramref name="value" /> is inside of defined range [<paramref name="lowerBound" />, <paramref name="upperBound" />[</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="lowerBound">The lower bound.</param>
            <param name="value">The value.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="parameterName">Name of the parameter.</param>
            <returns><paramref name="value"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="value"/> is not inside of defined range.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureInRangeIncludeLowerExcludeUpper``1(``0,``0,``0,System.String,System.Func{System.String})">
            <summary>Ensures if the <paramref name="value" /> is inside of defined range [<paramref name="lowerBound" />, <paramref name="upperBound" />[</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="lowerBound">The lower bound.</param>
            <param name="value">The value.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <returns><paramref name="value"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="value"/> is not inside of defined range.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureInRangeIncludeLowerExcludeUpper``1(``0,``0,``0,System.String,System.Func{System.String,System.String})">
            <summary>Ensures if the <paramref name="value" /> is inside of defined range [<paramref name="lowerBound" />, <paramref name="upperBound" />[</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="lowerBound">The lower bound.</param>
            <param name="value">The value.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <returns><paramref name="value"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="value"/> is not inside of defined range.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureInRangeExcludeLowerIncludeUpper``1(``0,``0,``0)">
            <summary>Ensures if the <paramref name="value" /> is inside of defined range ]<paramref name="lowerBound" />, <paramref name="upperBound" />]</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="lowerBound">The lower bound.</param>
            <param name="value">The value.</param>
            <param name="upperBound">The upper bound.</param>
            <returns><paramref name="value"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="value"/> is not inside of defined range.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureInRangeExcludeLowerIncludeUpper``1(``0,``0,``0,System.String)">
            <summary>Ensures if the <paramref name="value" /> is inside of defined range ]<paramref name="lowerBound" />, <paramref name="upperBound" />]</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="lowerBound">The lower bound.</param>
            <param name="value">The value.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="parameterName">Name of the parameter.</param>
            <returns><paramref name="value"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="value"/> is not inside of defined range.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureInRangeExcludeLowerIncludeUpper``1(``0,``0,``0,System.String,System.Func{System.String})">
            <summary>Ensures if the <paramref name="value" /> is inside of defined range ]<paramref name="lowerBound" />, <paramref name="upperBound" />]</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="lowerBound">The lower bound.</param>
            <param name="value">The value.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <returns><paramref name="value"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="value"/> is not inside of defined range.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureInRangeExcludeLowerIncludeUpper``1(``0,``0,``0,System.String,System.Func{System.String,System.String})">
            <summary>Ensures if the <paramref name="value" /> is inside of defined range ]<paramref name="lowerBound" />, <paramref name="upperBound" />]</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="lowerBound">The lower bound.</param>
            <param name="value">The value.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <returns><paramref name="value"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="value"/> is not inside of defined range.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureInRangeExcludeLowerExcludeUpper``1(``0,``0,``0)">
            <summary>Ensures if the <paramref name="value" /> is inside of defined range ]<paramref name="lowerBound" />, <paramref name="upperBound" />[</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="lowerBound">The lower bound.</param>
            <param name="value">The value.</param>
            <param name="upperBound">The upper bound.</param>
            <returns><paramref name="value"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="value"/> is not inside of defined range.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureInRangeExcludeLowerExcludeUpper``1(``0,``0,``0,System.String)">
            <summary>Ensures if the <paramref name="value" /> is inside of defined range ]<paramref name="lowerBound" />, <paramref name="upperBound" />[</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="lowerBound">The lower bound.</param>
            <param name="value">The value.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="parameterName">Name of the parameter.</param>
            <returns><paramref name="value"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="value"/> is not inside of defined range.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureInRangeExcludeLowerExcludeUpper``1(``0,``0,``0,System.String,System.Func{System.String})">
            <summary>Ensures if the <paramref name="value" /> is inside of defined range ]<paramref name="lowerBound" />, <paramref name="upperBound" />[</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="lowerBound">The lower bound.</param>
            <param name="value">The value.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <returns><paramref name="value"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="value"/> is not inside of defined range.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureInRangeExcludeLowerExcludeUpper``1(``0,``0,``0,System.String,System.Func{System.String,System.String})">
            <summary>Ensures if the <paramref name="value" /> is inside of defined range ]<paramref name="lowerBound" />, <paramref name="upperBound" />[</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="lowerBound">The lower bound.</param>
            <param name="value">The value.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <returns><paramref name="value"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="value"/> is not inside of defined range.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureIsTrue(System.Boolean)">
            <summary>Ensure if the the specified <paramref name="parameter" /> is true.</summary>
            <param name="parameter">Value to check if is true</param>
            <returns><paramref name="parameter"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="parameter" /> is false</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureIsTrue(System.Boolean,System.String)">
            <summary>Ensure if the the specified <paramref name="parameter"/> is true.</summary>
            <param name="parameter">Value to check if is true</param>
            <param name="parameterName">Name of the parameter.</param>
            <returns><paramref name="parameter"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="parameter"/> is false</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureIsTrue(System.Boolean,System.String,System.Func{System.String})">
            <summary>Ensure if the the specified <paramref name="parameter"/> is true.</summary>
            <param name="parameter">Value to check if is true</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <returns><paramref name="parameter"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="parameter"/> is false</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureIsTrue(System.Boolean,System.String,System.Func{System.String,System.String})">
            <summary>Ensure if the the specified <paramref name="parameter"/> is true.</summary>
            <param name="parameter">Value to check if is true</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <returns><paramref name="parameter"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="parameter"/> is false</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureIsFalse(System.Boolean)">
            <summary>Ensure if the the specified <paramref name="parameter" /> is false.</summary>
            <param name="parameter">Value to check if is false</param>
            <returns><paramref name="parameter"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="parameter" /> is true</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureIsFalse(System.Boolean,System.String)">
            <summary>Ensure if the the specified <paramref name="parameter"/> is false.</summary>
            <param name="parameter">Value to check if is false</param>
            <param name="parameterName">Name of the parameter.</param>
            <returns><paramref name="parameter"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="parameter"/> is true</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureIsFalse(System.Boolean,System.String,System.Func{System.String})">
            <summary>Ensure if the the specified <paramref name="parameter"/> is false.</summary>
            <param name="parameter">Value to check if is false</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <returns><paramref name="parameter"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="parameter"/> is true</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureIsFalse(System.Boolean,System.String,System.Func{System.String,System.String})">
            <summary>Ensure if the the specified <paramref name="parameter"/> is false.</summary>
            <param name="parameter">Value to check if is false</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <returns><paramref name="parameter"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="parameter"/> is true</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureMatches(System.String,System.Text.RegularExpressions.Regex)">
            <summary>Ensure if the the specified <paramref name="parameter"/> matches with <paramref name="regex"/>.</summary>
            <param name="parameter">The parameter value.</param>
            <param name="regex">The regex.</param>
            <returns><paramref name="parameter"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">When the specified <paramref name="parameter"/> does not match with <paramref name="regex"/></exception>
            <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureMatches(System.String,System.Text.RegularExpressions.Regex,System.String)">
            <summary>Ensure if the the specified <paramref name="parameter"/> matches with <paramref name="regex"/>.</summary>
            <param name="parameter">The parameter value.</param>
            <param name="regex">The regex.</param>
            <param name="parameterName">Name of the parameter.</param>
            <returns><paramref name="parameter"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">When the specified <paramref name="parameter"/> does not match with <paramref name="regex"/></exception>
            <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureMatches(System.String,System.Text.RegularExpressions.Regex,System.String,System.Func{System.String})">
            <summary>Ensure if the the specified <paramref name="parameter"/> matches with <paramref name="regex"/>.</summary>
            <param name="parameter">The parameter value.</param>
            <param name="regex">The regex.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <returns><paramref name="parameter"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">When the specified <paramref name="parameter"/> does not match with <paramref name="regex"/></exception>
            <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureMatches(System.String,System.Text.RegularExpressions.Regex,System.String,System.Func{System.String,System.String})">
            <summary>Ensure if the the specified <paramref name="parameter"/> matches with <paramref name="regex"/>.</summary>
            <param name="parameter">The parameter value.</param>
            <param name="regex">The regex.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <returns><paramref name="parameter"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">When the specified <paramref name="parameter"/> does not match with <paramref name="regex"/></exception>
            <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureDoesNotMatch(System.String,System.Text.RegularExpressions.Regex)">
            <summary>Ensure if the the specified <paramref name="parameter" /> doesn't match with <paramref name="regex" />.</summary>
            <param name="parameter">The parameter value.</param>
            <param name="regex">The regex.</param>
            <returns><paramref name="parameter"/></returns>
            <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureDoesNotMatch(System.String,System.Text.RegularExpressions.Regex,System.String)">
            <summary>Ensure if the the specified <paramref name="parameter" /> doesn't match with <paramref name="regex" />.</summary>
            <param name="parameter">The parameter value.</param>
            <param name="regex">The regex.</param>
            <param name="parameterName">Name of the parameter.</param>
            <returns><paramref name="parameter"/></returns>
            <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureDoesNotMatch(System.String,System.Text.RegularExpressions.Regex,System.String,System.Func{System.String})">
            <summary>Ensure if the the specified <paramref name="parameter" /> doesn't match with <paramref name="regex" />.</summary>
            <param name="parameter">The parameter value.</param>
            <param name="regex">The regex.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <returns><paramref name="parameter"/></returns>
            <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureDoesNotMatch(System.String,System.Text.RegularExpressions.Regex,System.String,System.Func{System.String,System.String})">
            <summary>Ensure if the the specified <paramref name="parameter" /> doesn't match with <paramref name="regex" />.</summary>
            <param name="parameter">The parameter value.</param>
            <param name="regex">The regex.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <returns><paramref name="parameter"/></returns>
            <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.EnsureHasLength``1(``0[],System.Int32,System.String)">
            <summary>Ensure that the array <paramref name="paramArray"/> is not null and has length equal to <paramref name="expectedLength"/>
             </summary>
            <typeparam name="TParam"></typeparam>
            <param name="paramArray">The array to check</param>
            <param name="expectedLength">The expected length of the array</param>
            <param name="parameterName">Name of the parameter</param>
            <returns></returns>
        </member>
        <member name="M:Sensirion.Validation.Ensure.IsNotNull``1(``0,System.String)">
            <summary>Ensures that <paramref name="parameter"/> is not null.</summary>
            <exception cref="T:System.ArgumentNullException">When the <paramref name="parameter"/> is null.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.IsNotNullOrEmpty(System.String,System.String)">
            <summary>Ensures that the string '<paramref name="parameter"/>' is not null or empty.</summary>
            <exception cref="T:System.ArgumentNullException">When the string '<paramref name="parameter"/>' is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">When the string '<paramref name="parameter"/>' is empty.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.IsNotNullOrWhiteSpace(System.String,System.String)">
            <summary>Ensures that the string '<paramref name="parameter"/>' is not null, white space or empty.</summary>
            <exception cref="T:System.ArgumentNullException">When the string '<paramref name="parameter"/>' is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">When the string '<paramref name="parameter"/>' is white space or empty.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.InRangeInclusive``1(``0,``0,``0,System.String)">
            <summary>Ensures that the <paramref name="value"/> is within the range [<paramref name="lowerBound"/>, <paramref name="upperBound"/>].</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">When the <paramref name="value"/> outside the specified bounds.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.InRangeExclusive``1(``0,``0,``0,System.String)">
            <summary>Ensures that the <paramref name="value"/> is within the range ]<paramref name="lowerBound"/>, <paramref name="upperBound"/>[.</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">When the <paramref name="value"/> outside the specified bounds.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.Argument(System.Boolean,System.String,System.Object[])">
            <summary>Ensures that <paramref name="expectedToBeTrue"/> is true.</summary>
            <exception cref="T:System.ArgumentException">When the <paramref name="expectedToBeTrue"/> is false.</exception>
        </member>
        <member name="M:Sensirion.Validation.Ensure.FileExists(System.String,System.String,System.Object[])">
            <summary>Ensures that <paramref name="filepath"/> is existing.</summary>
            <exception cref="T:System.ArgumentException">When the <paramref name="filepath"/> is is not existing.</exception>
        </member>
        <member name="T:Sensirion.Validation.Validate">
            <summary>
            <para>Commonly used validation checks for input parameters without returning a result.</para>
            <para>The idea of this validate class is to throw exceptions if does not match the criteria.</para>
            </summary>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateIsNotNull``1(``0)">
            <summary>Validate that <paramref name="parameter" /> is not null.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The parameter.</param>
            <exception cref="T:System.ArgumentNullException">When the <paramref name="parameter" /> is null.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateIsNotNull``1(``0,System.String)">
            <summary>Validate that <paramref name="parameter" /> is not null.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The parameter.</param>
            <param name="parameterName">Name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException">When the <paramref name="parameter" /> is null.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateIsNotNull``1(``0,System.String,System.Func{System.String})">
            <summary>Validate that <paramref name="parameter" /> is not null.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The parameter.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:System.ArgumentNullException">When the <paramref name="parameter" /> is null.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateIsNotNull``1(``0,System.String,System.Func{System.String,System.String})">
            <summary>Validate that <paramref name="parameter" /> is not null.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The parameter.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:System.ArgumentNullException">When the <paramref name="parameter" /> is null.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateIsNull``1(``0)">
            <summary>Validate that <paramref name="parameter" /> is null.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The parameter.</param>
            <exception cref="T:System.ArgumentException">When the <paramref name="parameter" /> is not null.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateIsNull``1(``0,System.String)">
            <summary>Validate that <paramref name="parameter" /> is null.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The parameter.</param>
            <param name="parameterName">Name of the parameter.</param>
            <exception cref="T:System.ArgumentException">When the <paramref name="parameter" /> is not null.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateIsNull``1(``0,System.String,System.Func{System.String})">
            <summary>Validate that <paramref name="parameter" /> is null.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The parameter.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:System.ArgumentException">When the <paramref name="parameter" /> is not null.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateIsNull``1(``0,System.String,System.Func{System.String,System.String})">
            <summary>Validate that <paramref name="parameter" /> is null.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The parameter.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:System.ArgumentException">When the <paramref name="parameter" /> is not null.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateIsNotNullOrEmpty(System.String)">
            <summary>Validate that the String '<paramref name="parameter" />' is not null or empty.</summary>
            <param name="parameter">The parameter.</param>
            <exception cref="T:System.ArgumentNullException">When the String '<paramref name="parameter" />' is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">When the String '<paramref name="parameter" />' is empty.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateIsNotNullOrEmpty(System.String,System.String)">
            <summary>Validate that the String '<paramref name="parameter" />' is not null or empty.</summary>
            <param name="parameter">The parameter.</param>
            <param name="parameterName">Name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException">When the String '<paramref name="parameter" />' is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">When the String '<paramref name="parameter" />' is empty.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateIsNotNullOrEmpty(System.String,System.String,System.Func{System.String})">
            <summary>Validate that the String '<paramref name="parameter" />' is not null or empty.</summary>
            <param name="parameter">The parameter.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:System.ArgumentNullException">When the String '<paramref name="parameter" />' is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">When the String '<paramref name="parameter" />' is empty.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateIsNotNullOrEmpty(System.String,System.String,System.Func{System.String,System.String})">
            <summary>Validate that the String '<paramref name="parameter" />' is not null or empty.</summary>
            <param name="parameter">The parameter.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:System.ArgumentNullException">When the String '<paramref name="parameter" />' is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">When the String '<paramref name="parameter" />' is empty.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateIsNotNullOrEmpty``1(System.Collections.Generic.List{``0})">
            <summary>Validate that the List '<paramref name="parameter" />' is not null or empty.</summary>
            <param name="parameter">The parameter.</param>
            <exception cref="T:System.ArgumentNullException">When the String '<paramref name="parameter" />' is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">When the String '<paramref name="parameter" />' is empty.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateIsNotNullOrEmpty``1(System.Collections.Generic.List{``0},System.String)">
            <summary>Validate that the List '<paramref name="parameter" />' is not null or empty.</summary>
            <param name="parameter">The parameter.</param>
            <param name="parameterName">Name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException">When the String '<paramref name="parameter" />' is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">When the String '<paramref name="parameter" />' is empty.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateIsNotNullOrEmpty``1(System.Collections.Generic.List{``0},System.String,System.Func{System.String})">
            <summary>Validate that the List '<paramref name="parameter" />' is not null or empty.</summary>
            <param name="parameter">The parameter.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:System.ArgumentNullException">When the String '<paramref name="parameter" />' is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">When the String '<paramref name="parameter" />' is empty.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateIsNotNullOrEmpty``1(System.Collections.Generic.List{``0},System.String,System.Func{System.String,System.String})">
            <summary>Validate that the List '<paramref name="parameter" />' is not null or empty.</summary>
            <param name="parameter">The parameter.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:System.ArgumentNullException">When the String '<paramref name="parameter" />' is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">When the String '<paramref name="parameter" />' is empty.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateIsNotNullOrWhiteSpace(System.String)">
            <summary>Validate that the String '<paramref name="parameter" />' is not null, white space or empty.</summary>
            <param name="parameter">The parameter.</param>
            <exception cref="T:System.ArgumentNullException">When the String '<paramref name="parameter" />' is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">When the String '<paramref name="parameter" />' is white space or empty.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateIsNotNullOrWhiteSpace(System.String,System.String)">
            <summary>Validate that the String '<paramref name="parameter" />' is not null, white space or empty.</summary>
            <param name="parameter">The parameter.</param>
            <param name="parameterName">Name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException">When the String '<paramref name="parameter" />' is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">When the String '<paramref name="parameter" />' is white space or empty.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateIsNotNullOrWhiteSpace(System.String,System.String,System.Func{System.String})">
            <summary>Validate that the String '<paramref name="parameter" />' is not null, white space or empty.</summary>
            <param name="parameter">The parameter.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:System.ArgumentNullException">When the String '<paramref name="parameter" />' is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">When the String '<paramref name="parameter" />' is white space or empty.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateIsNotNullOrWhiteSpace(System.String,System.String,System.Func{System.String,System.String})">
            <summary>Validate that the String '<paramref name="parameter" />' is not null, white space or empty.</summary>
            <param name="parameter">The parameter.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:System.ArgumentNullException">When the String '<paramref name="parameter" />' is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">When the String '<paramref name="parameter" />' is white space or empty.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateHasValue``1(System.Nullable{``0})">
            <summary>Validate that the <see cref="T:System.Nullable`1">nullable</see> <paramref name="parameter"/> has a value.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The <see cref="T:System.Nullable`1">nullable</see> parameter.</param>
            <exception cref="T:Sensirion.Validation.AffirmException">When the <paramref name="parameter" /> is null.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateHasValue``1(System.Nullable{``0},System.String)">
            <summary>Validate that the <see cref="T:System.Nullable`1">nullable</see> <paramref name="parameter"/> has a value.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The <see cref="T:System.Nullable`1">nullable</see> parameter.</param>
            <param name="parameterName">Name of the parameter.</param>
            <exception cref="T:Sensirion.Validation.AffirmException">When the <paramref name="parameter" /> is null.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateHasValue``1(System.Nullable{``0},System.String,System.Func{System.String})">
            <summary>Validate that the <see cref="T:System.Nullable`1">nullable</see> <paramref name="parameter"/> has a value.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The <see cref="T:System.Nullable`1">nullable</see> parameter.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:Sensirion.Validation.AffirmException">When the <paramref name="parameter" /> is null.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateHasValue``1(System.Nullable{``0},System.String,System.Func{System.String,System.String})">
            <summary>Validate that the <see cref="T:System.Nullable`1">nullable</see> <paramref name="parameter"/> has a value.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The <see cref="T:System.Nullable`1">nullable</see> parameter.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:Sensirion.Validation.AffirmException">When the <paramref name="parameter" /> is null.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateIsGreaterThan``1(``0,``0)">
            <summary>Validate if the specified <paramref name="parameter" /> is greater than <paramref name="minimum" />.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The parameter.</param>
            <param name="minimum">The minimum.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the <paramref name="parameter" /> is not greater than <paramref name="minimum" /></exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateIsGreaterThan``1(``0,``0,System.String)">
            <summary>Validate if the specified <paramref name="parameter" /> is greater than <paramref name="minimum" />.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The parameter.</param>
            <param name="minimum">The minimum.</param>
            <param name="parameterName">Name of the parameter.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the <paramref name="parameter" /> is not greater than <paramref name="minimum" /></exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateIsGreaterThan``1(``0,``0,System.String,System.Func{System.String})">
            <summary>Validate if the specified <paramref name="parameter" /> is greater than <paramref name="minimum" />.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The parameter.</param>
            <param name="minimum">The minimum.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the <paramref name="parameter" /> is not greater than <paramref name="minimum" /></exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateIsGreaterThan``1(``0,``0,System.String,System.Func{System.String,System.String})">
            <summary>Validate if the specified <paramref name="parameter" /> is greater than <paramref name="minimum" />.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The value.</param>
            <param name="minimum">The minimum.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the <paramref name="parameter" /> is not greater than <paramref name="minimum" /></exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateIsGreaterThanOrEqualsTo``1(``0,``0)">
            <summary>Validate if the specified <paramref name="parameter" /> is greater than or equals to <paramref name="minimum" />.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The parameter.</param>
            <param name="minimum">The minimum.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the <paramref name="parameter" /> is not greater than or equal to <paramref name="minimum" /></exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateIsGreaterThanOrEqualsTo``1(``0,``0,System.String)">
            <summary>Validate if the specified <paramref name="parameter" /> is greater than or equals to <paramref name="minimum" />.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The parameter.</param>
            <param name="minimum">The minimum.</param>
            <param name="parameterName">Name of the parameter.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the <paramref name="parameter" /> is not greater than or equal to <paramref name="minimum" /></exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateIsGreaterThanOrEqualsTo``1(``0,``0,System.String,System.Func{System.String})">
            <summary>Validate if the specified <paramref name="parameter" /> is greater than or equals to <paramref name="minimum" />.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The parameter.</param>
            <param name="minimum">The minimum.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the <paramref name="parameter" /> is not greater than or equal to <paramref name="minimum" /></exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateIsGreaterThanOrEqualsTo``1(``0,``0,System.String,System.Func{System.String,System.String})">
            <summary>Validate if the specified <paramref name="parameter" /> is greater than or equals to <paramref name="minimum" />.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The value.</param>
            <param name="minimum">The minimum.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the <paramref name="parameter" /> is not greater than or equal to <paramref name="minimum" /></exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateIsLessThan``1(``0,``0)">
            <summary>Determines whether the specified <paramref name="parameter"/> is less than <paramref name="maximum"/>.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The parameter.</param>
            <param name="maximum">The maximum.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the <paramref name="parameter" /> is not less than <paramref name="maximum" /></exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateIsLessThan``1(``0,``0,System.String)">
            <summary>Determines whether the specified <paramref name="parameter"/> is less than <paramref name="maximum"/>.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The parameter.</param>
            <param name="maximum">The maximum.</param>
            <param name="parameterName">Name of the parameter.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the <paramref name="parameter" /> is not less than <paramref name="maximum" /></exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateIsLessThan``1(``0,``0,System.String,System.Func{System.String})">
            <summary>Determines whether the specified <paramref name="parameter"/> is less than <paramref name="maximum"/>.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The parameter.</param>
            <param name="maximum">The maximum.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the <paramref name="parameter" /> is not less than <paramref name="maximum" /></exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateIsLessThan``1(``0,``0,System.String,System.Func{System.String,System.String})">
            <summary>Determines whether the specified <paramref name="parameter"/> is less than <paramref name="maximum"/>.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The value.</param>
            <param name="maximum">The maximum.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the <paramref name="parameter" /> is not less than <paramref name="maximum" /></exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateIsLessThanOrEqualsTo``1(``0,``0)">
            <summary>Validate if the specified <paramref name="parameter" /> is less than or equals to <paramref name="maximum" />.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The parameter.</param>
            <param name="maximum">The maximum.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the <paramref name="parameter" /> is not less than or equal to <paramref name="maximum" /></exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateIsLessThanOrEqualsTo``1(``0,``0,System.String)">
            <summary>Validate if the specified <paramref name="parameter" /> is less than or equals to <paramref name="maximum" />.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The parameter.</param>
            <param name="maximum">The maximum.</param>
            <param name="parameterName">Name of the parameter.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the <paramref name="parameter" /> is not less than or equal to <paramref name="maximum" /></exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateIsLessThanOrEqualsTo``1(``0,``0,System.String,System.Func{System.String})">
            <summary>Validate if the specified <paramref name="parameter" /> is less than or equals to <paramref name="maximum" />.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The parameter.</param>
            <param name="maximum">The maximum.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the <paramref name="parameter" /> is not less than or equal to <paramref name="maximum" /></exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateIsLessThanOrEqualsTo``1(``0,``0,System.String,System.Func{System.String,System.String})">
            <summary>Validate if the specified <paramref name="parameter" /> is less than or equals to <paramref name="maximum" />.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The value.</param>
            <param name="maximum">The maximum.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the <paramref name="parameter" /> is not less than or equal to <paramref name="maximum" /></exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateInRangeIncludeLowerIncludeUpper``1(``0,``0,``0)">
            <summary>Validates if the <paramref name="value" /> is inside of defined range [<paramref name="lowerBound" />, <paramref name="upperBound" />]</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="lowerBound">The lower bound.</param>
            <param name="value">The value.</param>
            <param name="upperBound">The upper bound.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="value"/> is not inside of defined range.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
            <exception cref="T:System.InvalidCastException"><paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface. -or-The conversion is not supported.</exception>
            <exception cref="T:System.OverflowException"><paramref name="value" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateInRangeIncludeLowerIncludeUpper``1(``0,``0,``0,System.String)">
            <summary>Validates if the <paramref name="value" /> is inside of defined range [<paramref name="lowerBound" />, <paramref name="upperBound" />]</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="lowerBound">The lower bound.</param>
            <param name="value">The value.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="parameterName">Name of the parameter.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="value"/> is not inside of defined range.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
            <exception cref="T:System.InvalidCastException"><paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface. -or-The conversion is not supported.</exception>
            <exception cref="T:System.OverflowException"><paramref name="value" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateInRangeIncludeLowerIncludeUpper``1(``0,``0,``0,System.String,System.Func{System.String})">
            <summary>Validates if the <paramref name="value" /> is inside of defined range [<paramref name="lowerBound" />, <paramref name="upperBound" />]</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="lowerBound">The lower bound.</param>
            <param name="value">The value.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="value"/> is not inside of defined range.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
            <exception cref="T:System.InvalidCastException"><paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface. -or-The conversion is not supported.</exception>
            <exception cref="T:System.OverflowException"><paramref name="value" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateInRangeIncludeLowerIncludeUpper``1(``0,``0,``0,System.String,System.Func{System.String,System.String})">
            <summary>Validates if the <paramref name="value" /> is inside of defined range [<paramref name="lowerBound" />, <paramref name="upperBound" />]</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="lowerBound">The lower bound.</param>
            <param name="value">The value.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="value"/> is not inside of defined range.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
            <exception cref="T:System.FormatException"><paramref name="value" /> is not in an appropriate format for a <see cref="T:System.Double" /> type.</exception>
            <exception cref="T:System.InvalidCastException"><paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface. -or-The conversion is not supported.</exception>
            <exception cref="T:System.OverflowException"><paramref name="value" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateInRangeIncludeLowerExcludeUpper``1(``0,``0,``0)">
            <summary>Validates if the <paramref name="value" /> is inside of defined range [<paramref name="lowerBound" />, <paramref name="upperBound" />[</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="lowerBound">The lower bound.</param>
            <param name="value">The value.</param>
            <param name="upperBound">The upper bound.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="value"/> is not inside of defined range.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
            <exception cref="T:System.OverflowException"><paramref name="value" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
            <exception cref="T:System.InvalidCastException"><paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface. -or-The conversion is not supported.</exception>
            <exception cref="T:System.FormatException"><paramref name="value" /> is not in an appropriate format for a <see cref="T:System.Double" /> type.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateInRangeIncludeLowerExcludeUpper``1(``0,``0,``0,System.String)">
            <summary>Validates if the <paramref name="value" /> is inside of defined range [<paramref name="lowerBound" />, <paramref name="upperBound" />[</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="lowerBound">The lower bound.</param>
            <param name="value">The value.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="parameterName">Name of the parameter.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="value"/> is not inside of defined range.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
            <exception cref="T:System.InvalidCastException"><paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface. -or-The conversion is not supported.</exception>
            <exception cref="T:System.OverflowException"><paramref name="value" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
            <exception cref="T:System.FormatException"><paramref name="value" /> is not in an appropriate format for a <see cref="T:System.Double" /> type.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateInRangeIncludeLowerExcludeUpper``1(``0,``0,``0,System.String,System.Func{System.String})">
            <summary>Validates if the <paramref name="value" /> is inside of defined range [<paramref name="lowerBound" />, <paramref name="upperBound" />[</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="lowerBound">The lower bound.</param>
            <param name="value">The value.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="value"/> is not inside of defined range.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
            <exception cref="T:System.InvalidCastException"><paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface. -or-The conversion is not supported.</exception>
            <exception cref="T:System.OverflowException"><paramref name="value" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
            <exception cref="T:System.FormatException"><paramref name="value" /> is not in an appropriate format for a <see cref="T:System.Double" /> type.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateInRangeIncludeLowerExcludeUpper``1(``0,``0,``0,System.String,System.Func{System.String,System.String})">
            <summary>Validates if the <paramref name="value" /> is inside of defined range [<paramref name="lowerBound" />, <paramref name="upperBound" />[</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="lowerBound">The lower bound.</param>
            <param name="value">The value.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="value"/> is not inside of defined range.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
            <exception cref="T:System.OverflowException"><paramref name="value" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
            <exception cref="T:System.InvalidCastException"><paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface. -or-The conversion is not supported.</exception>
            <exception cref="T:System.FormatException"><paramref name="value" /> is not in an appropriate format for a <see cref="T:System.Double" /> type.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateInRangeExcludeLowerIncludeUpper``1(``0,``0,``0)">
            <summary>Validates if the <paramref name="value" /> is inside of defined range ]<paramref name="lowerBound" />, <paramref name="upperBound" />]</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="lowerBound">The lower bound.</param>
            <param name="value">The value.</param>
            <param name="upperBound">The upper bound.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="value"/> is not inside of defined range.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
            <exception cref="T:System.InvalidCastException"><paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface. -or-The conversion is not supported.</exception>
            <exception cref="T:System.OverflowException"><paramref name="value" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
            <exception cref="T:System.FormatException"><paramref name="value" /> is not in an appropriate format for a <see cref="T:System.Double" /> type.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateInRangeExcludeLowerIncludeUpper``1(``0,``0,``0,System.String)">
            <summary>Validates if the <paramref name="value" /> is inside of defined range ]<paramref name="lowerBound" />, <paramref name="upperBound" />]</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="lowerBound">The lower bound.</param>
            <param name="value">The value.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="parameterName">Name of the parameter.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="value"/> is not inside of defined range.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
            <exception cref="T:System.InvalidCastException"><paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface. -or-The conversion is not supported.</exception>
            <exception cref="T:System.OverflowException"><paramref name="value" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
            <exception cref="T:System.FormatException"><paramref name="value" /> is not in an appropriate format for a <see cref="T:System.Double" /> type.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateInRangeExcludeLowerIncludeUpper``1(``0,``0,``0,System.String,System.Func{System.String})">
            <summary>Validates if the <paramref name="value" /> is inside of defined range ]<paramref name="lowerBound" />, <paramref name="upperBound" />]</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="lowerBound">The lower bound.</param>
            <param name="value">The value.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="value"/> is not inside of defined range.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
            <exception cref="T:System.InvalidCastException"><paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface. -or-The conversion is not supported.</exception>
            <exception cref="T:System.OverflowException"><paramref name="value" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
            <exception cref="T:System.FormatException"><paramref name="value" /> is not in an appropriate format for a <see cref="T:System.Double" /> type.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateInRangeExcludeLowerIncludeUpper``1(``0,``0,``0,System.String,System.Func{System.String,System.String})">
            <summary>Validates if the <paramref name="value" /> is inside of defined range ]<paramref name="lowerBound" />, <paramref name="upperBound" />]</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="lowerBound">The lower bound.</param>
            <param name="value">The value.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="value"/> is not inside of defined range.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
            <exception cref="T:System.OverflowException"><paramref name="value" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
            <exception cref="T:System.InvalidCastException"><paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface. -or-The conversion is not supported.</exception>
            <exception cref="T:System.FormatException"><paramref name="value" /> is not in an appropriate format for a <see cref="T:System.Double" /> type.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateInRangeExcludeLowerExcludeUpper``1(``0,``0,``0)">
            <summary>Validates if the <paramref name="value" /> is inside of defined range ]<paramref name="lowerBound" />, <paramref name="upperBound" />[</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="lowerBound">The lower bound.</param>
            <param name="value">The value.</param>
            <param name="upperBound">The upper bound.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="value"/> is not inside of defined range.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
            <exception cref="T:System.OverflowException">
                    <paramref name="value" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
            <exception cref="T:System.InvalidCastException">
                    <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface. -or-The conversion is not supported.</exception>
            <exception cref="T:System.FormatException">
                    <paramref name="value" /> is not in an appropriate format for a <see cref="T:System.Double" /> type.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateInRangeExcludeLowerExcludeUpper``1(``0,``0,``0,System.String)">
            <summary>Validates if the <paramref name="value" /> is inside of defined range ]<paramref name="lowerBound" />, <paramref name="upperBound" />[</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="lowerBound">The lower bound.</param>
            <param name="value">The value.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="parameterName">Name of the parameter.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="value"/> is not inside of defined range.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
            <exception cref="T:System.OverflowException">
                    <paramref name="value" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
            <exception cref="T:System.InvalidCastException">
                    <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface. -or-The conversion is not supported.</exception>
            <exception cref="T:System.FormatException">
                    <paramref name="value" /> is not in an appropriate format for a <see cref="T:System.Double" /> type.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateInRangeExcludeLowerExcludeUpper``1(``0,``0,``0,System.String,System.Func{System.String})">
            <summary>Validates if the <paramref name="value" /> is inside of defined range ]<paramref name="lowerBound" />, <paramref name="upperBound" />[</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="lowerBound">The lower bound.</param>
            <param name="value">The value.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="value"/> is not inside of defined range.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
            <exception cref="T:System.OverflowException">
                    <paramref name="value" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
            <exception cref="T:System.InvalidCastException">
                    <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface. -or-The conversion is not supported.</exception>
            <exception cref="T:System.FormatException">
                    <paramref name="value" /> is not in an appropriate format for a <see cref="T:System.Double" /> type.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateInRangeExcludeLowerExcludeUpper``1(``0,``0,``0,System.String,System.Func{System.String,System.String})">
            <summary>Validates if the <paramref name="value" /> is inside of defined range ]<paramref name="lowerBound" />, <paramref name="upperBound" />[</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="lowerBound">The lower bound.</param>
            <param name="value">The value.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="value"/> is not inside of defined range.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
            <exception cref="T:System.FormatException">
                    <paramref name="value" /> is not in an appropriate format for a <see cref="T:System.Double" /> type.</exception>
            <exception cref="T:System.OverflowException">
                    <paramref name="value" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
            <exception cref="T:System.InvalidCastException">
                    <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface. -or-The conversion is not supported.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateIsTrue(System.Boolean)">
            <summary>Validate if the specified <paramref name="parameter"/> is true.</summary>
            <param name="parameter">Value to check if is true</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="parameter"/> is false</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateIsTrue(System.Boolean,System.String)">
            <summary>Validate if the specified <paramref name="parameter"/> is true.</summary>
            <param name="parameter">Value to check if is true</param>
            <param name="parameterName">Name of the parameter.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="parameter"/> is false</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateIsTrue(System.Boolean,System.String,System.Func{System.String})">
            <summary>Validate if the specified <paramref name="parameter"/> is true.</summary>
            <param name="parameter">Value to check if is true</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="parameter"/> is false</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateIsTrue(System.Boolean,System.String,System.Func{System.String,System.String})">
            <summary>Validate if the specified <paramref name="parameter"/> is true.</summary>
            <param name="parameter">Value to check if is true</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="parameter"/> is false</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateIsFalse(System.Boolean)">
            <summary>Validate if the specified <paramref name="parameter"/> is false.</summary>
            <param name="parameter">Value to check if is false</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="parameter"/> is true</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateIsFalse(System.Boolean,System.String)">
            <summary>Validate if the specified <paramref name="parameter"/> is false.</summary>
            <param name="parameter">Value to check if is false</param>
            <param name="parameterName">Name of the parameter.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="parameter"/> is true</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateIsFalse(System.Boolean,System.String,System.Func{System.String})">
            <summary>Validate if the specified <paramref name="parameter"/> is false.</summary>
            <param name="parameter">Value to check if is false</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="parameter"/> is true</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateIsFalse(System.Boolean,System.String,System.Func{System.String,System.String})">
            <summary>Validate if the specified <paramref name="parameter"/> is false.</summary>
            <param name="parameter">Value to check if is false</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="parameter"/> is true</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateMatches(System.String,System.Text.RegularExpressions.Regex)">
            <summary>Validate if the specified <paramref name="parameter"/> matches with <paramref name="regex"/>.</summary>
            <param name="parameter">The parameter value.</param>
            <param name="regex">The regex.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the specified <paramref name="parameter"/> does not match with <paramref name="regex"/></exception>
            <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateMatches(System.String,System.Text.RegularExpressions.Regex,System.String)">
            <summary>Validate if the specified <paramref name="parameter"/> matches with <paramref name="regex"/>.</summary>
            <param name="parameter">The parameter value.</param>
            <param name="regex">The regex.</param>
            <param name="parameterName">Name of the parameter.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the specified <paramref name="parameter"/> does not match with <paramref name="regex"/></exception>
            <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateMatches(System.String,System.Text.RegularExpressions.Regex,System.String,System.Func{System.String})">
            <summary>Validate if the specified <paramref name="parameter"/> matches with <paramref name="regex"/>.</summary>
            <param name="parameter">The parameter value.</param>
            <param name="regex">The regex.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the specified <paramref name="parameter"/> does not match with <paramref name="regex"/></exception>
            <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateMatches(System.String,System.Text.RegularExpressions.Regex,System.String,System.Func{System.String,System.String})">
            <summary>Validate if the specified <paramref name="parameter"/> matches with <paramref name="regex"/>.</summary>
            <param name="parameter">The parameter value.</param>
            <param name="regex">The regex.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the specified <paramref name="parameter"/> does not match with <paramref name="regex"/></exception>
            <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateDoesNotMatch(System.String,System.Text.RegularExpressions.Regex)">
            <summary>Validate if the specified <paramref name="parameter" /> doesn't match with <paramref name="regex" />.</summary>
            <param name="parameter">The parameter value.</param>
            <param name="regex">The regex.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the specified <paramref name="parameter"/> matches with <paramref name="regex"/></exception>
            <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateDoesNotMatch(System.String,System.Text.RegularExpressions.Regex,System.String)">
            <summary>Validate if the specified <paramref name="parameter" /> doesn't match with <paramref name="regex" />.</summary>
            <param name="parameter">The parameter value.</param>
            <param name="regex">The regex.</param>
            <param name="parameterName">Name of the parameter.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the specified <paramref name="parameter"/> matches with <paramref name="regex"/></exception>
            <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateDoesNotMatch(System.String,System.Text.RegularExpressions.Regex,System.String,System.Func{System.String})">
            <summary>Validate if the specified <paramref name="parameter" /> doesn't match with <paramref name="regex" />.</summary>
            <param name="parameter">The parameter value.</param>
            <param name="regex">The regex.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the specified <paramref name="parameter"/> matches with <paramref name="regex"/></exception>
            <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateDoesNotMatch(System.String,System.Text.RegularExpressions.Regex,System.String,System.Func{System.String,System.String})">
            <summary>Validate if the specified <paramref name="parameter" /> doesn't match with <paramref name="regex" />.</summary>
            <param name="parameter">The parameter value.</param>
            <param name="regex">The regex.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the specified <paramref name="parameter"/> matches with <paramref name="regex"/></exception>
            <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateAreEqual``1(System.IEquatable{``0},System.IEquatable{``0})">
            <summary>Verifies if <paramref name="leftParameterValue" /> is equal to <paramref name="rightParameterValue" /> by using methods on <see cref="T:System.IEquatable`1" />.</summary>
            <typeparam name="TCompare">The type of the compare.</typeparam>
            <param name="leftParameterValue">The left parameter value.</param>
            <param name="rightParameterValue">The right parameter value.</param>
            <exception cref="T:System.ArgumentException">If <paramref name="leftParameterValue" /> is not equal to <paramref name="rightParameterValue" /></exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateAreEqual``1(System.IEquatable{``0},System.IEquatable{``0},System.String,System.String)">
            <summary>Verifies if <paramref name="leftParameterValue" /> is equal to <paramref name="rightParameterValue" /> by using methods on <see cref="T:System.IEquatable`1" />.</summary>
            <typeparam name="TCompare">The type of the compare.</typeparam>
            <param name="leftParameterValue">The left parameter value.</param>
            <param name="rightParameterValue">The right parameter value.</param>
            <param name="leftParameterName">Name of the left parameter.</param>
            <param name="rightParameterName">Name of the right parameter.</param>
            <exception cref="T:System.ArgumentException">If <paramref name="leftParameterValue" /> is not equal to <paramref name="rightParameterValue" /></exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateAreEqual``1(System.IEquatable{``0},System.IEquatable{``0},System.String,System.String,System.Func{System.String})">
            <summary>Verifies if <paramref name="leftParameterValue" /> is equal to <paramref name="rightParameterValue" /> by using methods on <see cref="T:System.IEquatable`1" />.</summary>
            <typeparam name="TCompare">The type of the compare.</typeparam>
            <param name="leftParameterValue">The left parameter value.</param>
            <param name="rightParameterValue">The right parameter value.</param>
            <param name="leftParameterName">Name of the left parameter.</param>
            <param name="rightParameterName">Name of the right parameter.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:System.ArgumentException">If <paramref name="leftParameterValue" /> is not equal to <paramref name="rightParameterValue" /></exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateAreEqual``1(System.IEquatable{``0},System.IEquatable{``0},System.String,System.String,System.Func{System.String,System.String})">
            <summary>Verifies if <paramref name="leftParameterValue" /> is equal to <paramref name="rightParameterValue" /> by using methods on <see cref="T:System.IEquatable`1" />.</summary>
            <typeparam name="TCompare">The type of the compare.</typeparam>
            <param name="leftParameterValue">The left parameter value.</param>
            <param name="rightParameterValue">The right parameter value.</param>
            <param name="leftParameterName">Name of the left parameter.</param>
            <param name="rightParameterName">Name of the right parameter.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:System.ArgumentException">If <paramref name="leftParameterValue" /> is not equal to <paramref name="rightParameterValue" /></exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateAreNotEqual``1(System.IEquatable{``0},System.IEquatable{``0})">
            <summary>Verifies if <paramref name="leftParameterValue" /> is not equal to <paramref name="rightParameterValue" /> by using methods on <see cref="T:System.IEquatable`1" />.</summary>
            <typeparam name="TCompare">The type of the compare.</typeparam>
            <param name="leftParameterValue">The left parameter value.</param>
            <param name="rightParameterValue">The right parameter value.</param>
            <exception cref="T:System.ArgumentException">If <paramref name="leftParameterValue" /> is equal to <paramref name="rightParameterValue" /></exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateAreNotEqual``1(System.IEquatable{``0},System.IEquatable{``0},System.String,System.String)">
            <summary>Verifies if <paramref name="leftParameterValue" /> is not equal to <paramref name="rightParameterValue" /> by using methods on <see cref="T:System.IEquatable`1" />.</summary>
            <typeparam name="TCompare">The type of the compare.</typeparam>
            <param name="leftParameterValue">The left parameter value.</param>
            <param name="rightParameterValue">The right parameter value.</param>
            <param name="leftParameterName">Name of the left parameter.</param>
            <param name="rightParameterName">Name of the right parameter.</param>
            <exception cref="T:System.ArgumentException">If <paramref name="leftParameterValue" /> is equal to <paramref name="rightParameterValue" /></exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateAreNotEqual``1(System.IEquatable{``0},System.IEquatable{``0},System.String,System.String,System.Func{System.String})">
            <summary>Verifies if <paramref name="leftParameterValue" /> is not equal to <paramref name="rightParameterValue" /> by using methods on <see cref="T:System.IEquatable`1" />.</summary>
            <typeparam name="TCompare">The type of the compare.</typeparam>
            <param name="leftParameterValue">The left parameter value.</param>
            <param name="rightParameterValue">The right parameter value.</param>
            <param name="leftParameterName">Name of the left parameter.</param>
            <param name="rightParameterName">Name of the right parameter.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:System.ArgumentException">If <paramref name="leftParameterValue" /> is equal to <paramref name="rightParameterValue" /></exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateAreNotEqual``1(System.IEquatable{``0},System.IEquatable{``0},System.String,System.String,System.Func{System.String,System.String})">
            <summary>Verifies if <paramref name="leftParameterValue" /> is not equal to <paramref name="rightParameterValue" /> by using methods on <see cref="T:System.IEquatable`1" />.</summary>
            <typeparam name="TCompare">The type of the compare.</typeparam>
            <param name="leftParameterValue">The left parameter value.</param>
            <param name="rightParameterValue">The right parameter value.</param>
            <param name="leftParameterName">Name of the left parameter.</param>
            <param name="rightParameterName">Name of the right parameter.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:System.ArgumentException">If <paramref name="leftParameterValue" /> is equal to <paramref name="rightParameterValue" /></exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateFileExists(System.String)">
            <summary>Validate if the specified file path exists.</summary>
            <param name="filePath">The file path.</param>
            <exception cref="T:System.ArgumentException">If file doesn't exist</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateFileExists(System.String,System.Func{System.String})">
            <summary>Validate if the specified file path exists.</summary>
            <param name="filePath">The file path.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:System.ArgumentException">If file doesn't exist</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateFileExists(System.String,System.Func{System.String,System.String})">
            <summary>Validate if the specified file path exists.</summary>
            <param name="filePath">The file path.</param>public static void
            <param name="customMessage">The custom message.</param>
            <exception cref="T:System.ArgumentException">If file doesn't exist</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.ValidateFileExists(System.String,System.String,System.Func{System.String,System.String})">
            <summary>Validate if the specified file path exists.</summary>
            <param name="filePath">The file path.</param>
            <param name="parameterName">The name of the parameter that holds the <paramref name="filePath"/>.</param>
            <param name="customMessage">The custom message.</param>
            <exception cref="T:System.ArgumentException">If file doesn't exist</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.IsNotNull``1(``0,System.String)">
            <summary>Validate that <paramref name="parameter" /> is not null.</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="parameter">The parameter.</param>
            <param name="parameterName">Name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException">When the <paramref name="parameter" /> is null.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.IsNotNullOrEmpty(System.String,System.String)">
            <summary>Validate that the String '<paramref name="parameter" />' is not null or empty.</summary>
            <param name="parameter">The parameter.</param>
            <param name="parameterName">Name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException">When the String '<paramref name="parameter" />' is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">When the String '<paramref name="parameter" />' is empty.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.IsNotNullOrWhiteSpace(System.String,System.String)">
            <summary>Validate that the String '<paramref name="parameter" />' is not null, white space or empty.</summary>
            <param name="parameter">The parameter.</param>
            <param name="parameterName">Name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException">When the String '<paramref name="parameter" />' is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">When the String '<paramref name="parameter" />' is white space or empty.</exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.IsGreaterThan``1(``0,``0,System.String)">
            <summary>Validate if the specified <paramref name="parameter"/> is greater than <paramref name="minimum"/>.</summary>
            <typeparam name="TParam"></typeparam>
            <param name="parameter">The value.</param>
            <param name="minimum">The minimum.</param>
            <param name="parameterName">Name of the parameter.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the <paramref name="parameter"/> is not greater than <paramref name="minimum"/></exception>
        </member>
        <member name="M:Sensirion.Validation.Validate.IsGreaterThanOrEqualsTo``1(``0,``0,System.String)">
            <summary>Validate if the specified <paramref name="parameter"/> is greater than <paramref name="minimum"/>.</summary>
            <typeparam name="TParam"></typeparam>
            <param name="parameter">The value.</param>
            <param name="minimum">The minimum.</param>
            <param name="parameterName">Name of the parameter.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the <paramref name="parameter"/> is not greater than or equal to <paramref name="minimum"/></exception>
        </member>
        <member name="T:Sensirion.Validation.ValidationHelper">
            <summary>Helper class for Validate and Ensure classes</summary>
        </member>
        <member name="M:Sensirion.Validation.ValidationHelper.CheckForNaN``1(``0)">
            <summary>Checks for NaN</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="value">The value.</param>
            <returns><c>True</c> if is NaN, otherwise false</returns>
            <exception cref="T:System.FormatException">
                    <paramref name="value" /> is not in an appropriate format for a <see cref="T:System.Double" /> type.</exception>
            <exception cref="T:System.InvalidCastException">
                    <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface. -or-The conversion is not supported.</exception>
            <exception cref="T:System.OverflowException">
                    <paramref name="value" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
        </member>
        <member name="M:Sensirion.Validation.ValidationHelper.NotBlankParameterName(System.String)">
            <summary>Return UnknownParameterName if <paramref name="parameterName"/> is null</summary>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="M:Sensirion.Validation.ValidationHelper.NotBlankElementTypeName(System.Func{System.String})">
            <summary>Return UnknownParameterName if <paramref name="queriedEntity"/> is null</summary>
            <param name="queriedEntity">The queried entity.</param>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Sensirion.Validation.ValidationHelper.FormatMessage(System.String,System.Func{System.String,System.String})">
            <summary>Formats the message.</summary>
            <param name="defaultMessage">The default message.</param>
            <param name="customMessage">The custom message.</param>
            <returns></returns>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="T:Sensirion.Validation.Verify">
            <summary>Provides commonly used verification logic.</summary>
        </member>
        <member name="M:Sensirion.Validation.Verify.AreEqual``1(System.IEquatable{``0},System.IEquatable{``0})">
            <summary>Verifies that <paramref name="left"/> is equal to <paramref name="right"/> by using methods on
            <see cref="T:System.IEquatable`1"/>.</summary>
        </member>
        <member name="M:Sensirion.Validation.Verify.AreNotEqual``1(System.IEquatable{``0},System.IEquatable{``0})">
            <summary>Verifies that <paramref name="left"/> is not equal to <paramref name="right"/> by using methods on
            <see cref="T:System.IEquatable`1"/>.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.SkipLocalsInitAttribute">
            <summary>
            Used to indicate to the compiler that the <c>.locals init</c> flag should not be set in method headers.
            </summary>
            <remarks>Internal copy of the .NET 5 attribute.</remarks>
        </member>
    </members>
</doc>
