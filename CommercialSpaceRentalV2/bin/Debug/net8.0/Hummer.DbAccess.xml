<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hummer.DbAccess</name>
    </assembly>
    <members>
        <member name="T:Sensirion.Hummer.DbAccess.Data.Configuration.Sink">
            <summary>This object represents the properties and methods of a the table Sink.
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.SelectFromAppAndDataMeaning(Sensirion.Data.DB.IExecuteQuery,System.String,System.String)">
            <summary> Get the sinks configured for the current app and data meaning
            </summary>
            <param name="helper">The helper to execute the DB query</param>
            <param name="appKey">Application identifier</param>
            <param name="dataMeaning">Label for the data meaning</param>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.FIELD_NAMES">
            <summary>Comma separated list with all fields that are contained in the class. This also contains identity and computed fields.
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.FIELD_NAMES_WITH_ALIAS">
            <summary>Comma separated list with all fields that are contained in the class with table name as alias.This also contains identity and computed fields.
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.DEFAULT_ALIAS">
            <summary>table name used as alias in the <see cref="F:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.FIELD_NAMES_WITH_ALIAS"/> const
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.FIELD_NAMES_WITHOUT_PRIMARY">
            <summary>Comma separated list with all fields (except the primary key and the computed columns) that are contained in the class 
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.FIELD_NAMES_ARRAY">
            <summary><see cref="T:System.Array"/> with all fields that are contained in the class 
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.FIELD_NAMES_WITHOUT_PRIMARY_ARRAY">
            <summary><see cref="T:System.Array"/> with all fields (except the primary key and the computed columns) that are contained in the class 
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.FROM_TABLE_FULL_NAME">
            <summary>Constant that contains the table name for the FROM Statement
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.FROM_TABLE_FULL_NAME_WITH_DEFAULT_ALIAS">
            <summary>Constant that contains the table name for the FROM Statement
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.SCHEMA_NAME">
            <summary>Constant that contains the name of the Schema where the table resists
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.TABLE_NAME">
            <summary>Constant that contains the table name for the FROM Statement
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.SINKID_FIELD_NAME">
            <summary>Constant that represents the field name corresponding to the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.SinkId"/> property
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.HOSTCATEGORY_FIELD_NAME">
            <summary>Constant that represents the field name corresponding to the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.HostCategory"/> property
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.BASEURL_FIELD_NAME">
            <summary>Constant that represents the field name corresponding to the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.BaseUrl"/> property
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.NAME_FIELD_NAME">
            <summary>Constant that represents the field name corresponding to the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.Name"/> property
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.USERNAME_FIELD_NAME">
            <summary>Constant that represents the field name corresponding to the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.Username"/> property
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.PASSWORD_FIELD_NAME">
            <summary>Constant that represents the field name corresponding to the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.Password"/> property
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.STATICMETADATA_FIELD_NAME">
            <summary>Constant that represents the field name corresponding to the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.StaticMetadata"/> property
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.NOT_CREATED_ON_DATABASE_ID">
            <summary>Id of a object that has not been created on the database. If first time saved
              the object will become a different id
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.GetFromWithAlias(System.String)">
            <summary>Gets the from clause with a defined alias. If just a common alias is used there is a constant
              to get a default aliased list of fields <see cref="F:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.FIELD_NAMES_WITH_ALIAS"/>
            </summary>
            <param name="aAlias">Alias to be used</param>
            <returns>List of field names with the alias</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.#ctor(Sensirion.Data.DB.IExecuteQuery)">
            <summary>Creates a new instance 
            </summary>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.#ctor(System.Int32,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Creates a new instance and reads the data row with the submitted <paramref name="aId"/> into the instance 
            </summary>
            <param name="aId">Id of the data row (primary key)</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <exception cref="T:System.Data.DataException">Thrown if a element with the given id does not exists on the database</exception>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.#ctor(System.Data.SqlClient.SqlDataReader)">
            <summary>Reads the element from a reader submitted by the caller. The method 
               executes the <paramref name="aReader"/>.Read() Method to get the data row.
            </summary>
            <param name="aReader">Reader with data in it</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.LoadSingleRowFromReader(System.Data.SqlClient.SqlDataReader)">
            <summary>Loads a single row from a reader into the current item 
            </summary>
            <param name="aReader">Opened reader containing a row with the item data</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.LoadFromReader(System.Data.SqlClient.SqlDataReader,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Returns a list of <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.Sink"/> objects that has been read from the submitted reader 
            </summary>
            <param name="aReader">Well configured reader with data rows in it</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>A list of <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.Sink"/> objects</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.LoadCustomized(System.String,System.String,Sensirion.Data.DB.IExecuteQuery,Sensirion.Data.DB.SQLHelper.ParameterType[])">
            <summary>Returns a list of items. The caller can submit a customized from and where clause to select a specific set of items
            </summary>
            <param name="aCustomWhere">WHERE clause (can be submitted with or without the word 'WHERE')</param>
            <param name="aAdditionalFrom">Additional tables or joins to match the WHERE clause</param>
            <param name="aParameters"><see cref="T:System.Array"/> of parameters to customize the query if needed</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>A list containing all selected items</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.LoadCustomized(System.String,System.String,System.Int32,Sensirion.Data.DB.IExecuteQuery,Sensirion.Data.DB.SQLHelper.ParameterType[])">
            <summary>Returns a list of items. The caller can submit a customized from and where clause to select a specific set of items
            </summary>
            <param name="aCustomWhere">WHERE clause (can be submitted with or without the word 'WHERE')</param>
            <param name="aAdditionalFrom">Additional tables or joins to match the WHERE clause. The additional piece
              will be attached after the table name. So the first sign must be a semicolon
             </param>
            <param name="aParameters"><see cref="T:System.Array"/> of parameters to customize the query if needed</param>
            <param name="aCount">Count of max data rows to get (TOP Statement). If count is 0 or less no TOP Statement will be used</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>A list containing all selected items</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.LoadCustomized(System.String,System.String,System.Int32,Sensirion.Data.DB.IExecuteQuery,System.Boolean,Sensirion.Data.DB.SQLHelper.ParameterType[])">
            <summary>Returns a list of items. The caller can submit a customized from and where clause to select a specific set of items
            </summary>
            <param name="aCustomWhere">WHERE clause (can be submitted with or without the word 'WHERE')</param>
            <param name="aAdditionalFrom">Additional tables or joins to match the WHERE clause. The additional piece
              will be attached after the table name. So the first sign must be a semicolon
             </param>
            <param name="aParameters"><see cref="T:System.Array"/> of parameters to customize the query if needed</param>
            <param name="aCount">Count of max data rows to get (TOP Statement). If count is 0 or less no TOP Statement will be used</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <param name="aUseDistinct">If <see langword="true"/> the query will use the <c>SELECT DISTINCT</c> syntax</param>
            <returns>A list containing all selected items</returns>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.IsNew">
            <summary>Indicates whether the object is new or exists already on the database
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.Delete">
            <summary>Deletes the element from the database
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.Delete(System.Int32,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Deletes a element from the database 
            </summary>
            <param name="aId">Primary key of the object to delete</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.Update">
            <summary>Updates the element on the database with the new values 
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.Create">
            <summary>Creates a new <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.Sink"/> in the Database and returns the identity column in the id property
            </summary>
            <exception cref="T:System.Data.MissingPrimaryKeyException">Thrown, if the identity could not read back</exception>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.NewSink(System.Int32,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Creates a new item with the given id 
            </summary>
            <param name="aId">ID that the item should have</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>new empty instance (only id is set)</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.GetSink(System.Int32,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Reads an element from the database
            </summary>
            <param name="aId">Primary key of the element to read</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>A <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.Sink"/> object that represents the read element</returns>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.Sink._SinkId">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.SinkId"/> Property.
            <para>Primary key
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.SinkId"/> field in the table t_Sink</para>
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.SinkId">
            <summary>Primary key
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.SinkId"/> field in the table t_Sink
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.Sink._HostCategory">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.HostCategory"/> Property.
            <para>The type of the host
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.HostCategory"/> field in the table t_Sink</para>
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.HostCategory">
            <summary>The type of the host
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.HostCategory"/> field in the table t_Sink
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.Sink._BaseUrl">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.BaseUrl"/> Property.
            <para>Base Url
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.BaseUrl"/> field in the table t_Sink</para>
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.BaseUrl">
            <summary>Base Url
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.BaseUrl"/> field in the table t_Sink
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.Sink._Name">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.Name"/> Property.
            <para>Name of the sink
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.Name"/> field in the table t_Sink</para>
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.Name">
            <summary>Name of the sink
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.Name"/> field in the table t_Sink
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.Sink._Username">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.Username"/> Property.
            <para>Credential username
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.Username"/> field in the table t_Sink</para>
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.Username">
            <summary>Credential username
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.Username"/> field in the table t_Sink
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.Sink._Password">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.Password"/> Property.
            <para>Credential password
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.Password"/> field in the table t_Sink</para>
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.Password">
            <summary>Credential password
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.Password"/> field in the table t_Sink
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.Sink._StaticMetadata">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.StaticMetadata"/> Property.
            <para>Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.StaticMetadata"/> field in the table t_Sink</para>
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.StaticMetadata">
            <summary>Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.StaticMetadata"/> field in the table t_Sink
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.Sink._DispatchQueuesConfiguration">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.DispatchQueuesConfiguration"/> Property.
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.DispatchQueuesConfiguration">
            <summary>Represents the items subordinated to the t_Sink table
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.LoadAllConfigurationDispatchQueue(System.Boolean)">
            <summary>Loads all the <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue"/> from the t_Sink
            </summary>
            <param name="aDeep">True, if the depending elements will be loaded too</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.LoadAllConfigurationDispatchQueue(System.Int32)">
            <summary>Loads all the <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue"/> from the t_Sink
            </summary>
            <param name="aDepth">Limits the level to load all depending objects (-1 means all, 0 means no objects).
              To load only the first level call it with 1.</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.AddNewConfigurationDispatchQueue(Sensirion.Data.DB.IExecuteQuery)">
            <summary>Adds a new <c>Configuration.DispatchQueue</c> to the <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.Sink"/>
            </summary>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.LoadAllDepending(System.Boolean)">
            <summary>Loads ALL Foreign Key related elements. This can be very time consuming
            </summary>
            <param name="aDeep"><see langword="true"/>, if depending elements of sub elements should be loaded too</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.LoadAllDepending(System.Int32)">
            <summary>Loads ALL Foreign Key related elements. This can be very time consuming
            </summary>
            <param name="aDepth">Limits the level to load all depending objects (-1 means all level)</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.Save(System.Int32)">
            <summary>Saves the Element to the db. If the element does not exists, a new data row will be
              inserted. Otherwise the existing row will be updated with the new values.
              <para>The element does not perform an update, if the modified flag is not <see langword="true"/>.
              </para>
            </summary>
            <param name="aDepth">Levels to be saved.
              <para>
                <list type="bullet">
                  <item>
                    <description>A Level of 0 means, that no dependent objects will be saved</description>
                  </item><item>
                    <description>Level of 1 means, all depending objects will be saved but not deep.</description>
                  </item><item>
                    <description>Level of two means, that all depending objects and all their depending objects will be saved.</description>
                  </item><item>
                    <description>Level of -1 means, that all depending objects will be saved deep (unlimited level).</description>
                  </item>
                </list>
              </para>
            </param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.UpdateDependentObjectsWithID(System.Int32)">
            <summary>Updates all depending objects with the ID of the current object 
            </summary>
            <param name="aDepth"><see langword="true"/>, if the depending elements will be updated too</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.ResetId(System.Int32)">
            <summary>Marks the object as new if it has not been loaded from database
              This can be useful, if a transaction has been rolled back and all the objects
              must be saved again. If some actions has been taken before and some objects got an Id
              they must be reseted to be new, because the received Id does not exists anymore
              on the database and a identity violation will occur if the object is saved again.
            </summary>
            <param name="aDepth">The level to which the reset will be done (-1 = all level)</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.WritePropertiesToStream(System.IO.MemoryStream)">
            <summary>Writes the binary representation of all db properties 
              to the passed <paramref name="aSerializeStream"/> for 
              the calculation of the hash. The calculation includes all
              NOT foreign key columns.
            </summary>
            <param name="aSerializeStream">Stream where the db properties 
              has to be serialized for hash calculation.
            </param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.GetDataAsArray">
            <summary>Get all data (without primary key and computed entries) as array.
            The order of the data in the array matches FIELD_NAMES_WITHOUT_PRIMARY_ARRAY.
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.Sink.GetDataColumnTypes">
            <summary>Get all column names (without primary key and computed entries) with their non-nullable data type.
            The order of the data in the array matches the FIELD_NAMES_WITHOUT_PRIMARY_ARRAY.
            </summary>
        </member>
        <member name="T:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue">
            <summary>This object represents the properties and methods of a the table DispatchQueue.
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.Sink">
            <summary>
            The sink for this queue
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.SelectFromAppAndDataMeaningWithSink(Sensirion.Data.DB.IExecuteQuery,System.String,System.String)">
            <summary> Get the dispatch queues configured for the current app and data meaning
            </summary>
            <param name="helper"></param>
            <param name="appKey">Application identifier</param>
            <param name="dataMeaning">Label for the data meaning</param>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.FIELD_NAMES">
            <summary>Comma separated list with all fields that are contained in the class. This also contains identity and computed fields.
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.FIELD_NAMES_WITH_ALIAS">
            <summary>Comma separated list with all fields that are contained in the class with table name as alias.This also contains identity and computed fields.
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.DEFAULT_ALIAS">
            <summary>table name used as alias in the <see cref="F:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.FIELD_NAMES_WITH_ALIAS"/> const
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.FIELD_NAMES_WITHOUT_PRIMARY">
            <summary>Comma separated list with all fields (except the primary key and the computed columns) that are contained in the class 
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.FIELD_NAMES_ARRAY">
            <summary><see cref="T:System.Array"/> with all fields that are contained in the class 
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.FIELD_NAMES_WITHOUT_PRIMARY_ARRAY">
            <summary><see cref="T:System.Array"/> with all fields (except the primary key and the computed columns) that are contained in the class 
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.FROM_TABLE_FULL_NAME">
            <summary>Constant that contains the table name for the FROM Statement
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.FROM_TABLE_FULL_NAME_WITH_DEFAULT_ALIAS">
            <summary>Constant that contains the table name for the FROM Statement
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.SCHEMA_NAME">
            <summary>Constant that contains the name of the Schema where the table resists
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.TABLE_NAME">
            <summary>Constant that contains the table name for the FROM Statement
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.DISPATCHQUEUEID_FIELD_NAME">
            <summary>Constant that represents the field name corresponding to the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.DispatchQueueId"/> property
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.DATAMEANING_FIELD_NAME">
            <summary>Constant that represents the field name corresponding to the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.DataMeaning"/> property
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.SOURCEAPPLICATIONID_FIELD_NAME">
            <summary>Constant that represents the field name corresponding to the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.SourceApplicationId"/> property
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.SINKID_FIELD_NAME">
            <summary>Constant that represents the field name corresponding to the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.SinkId"/> property
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.NOT_CREATED_ON_DATABASE_ID">
            <summary>Id of a object that has not been created on the database. If first time saved
              the object will become a different id
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.GetFromWithAlias(System.String)">
            <summary>Gets the from clause with a defined alias. If just a common alias is used there is a constant
              to get a default aliased list of fields <see cref="F:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.FIELD_NAMES_WITH_ALIAS"/>
            </summary>
            <param name="aAlias">Alias to be used</param>
            <returns>List of field names with the alias</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.#ctor(Sensirion.Data.DB.IExecuteQuery)">
            <summary>Creates a new instance 
            </summary>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.#ctor(System.Int32,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Creates a new instance and reads the data row with the submitted <paramref name="aId"/> into the instance 
            </summary>
            <param name="aId">Id of the data row (primary key)</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <exception cref="T:System.Data.DataException">Thrown if a element with the given id does not exists on the database</exception>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.#ctor(System.Data.SqlClient.SqlDataReader)">
            <summary>Reads the element from a reader submitted by the caller. The method 
               executes the <paramref name="aReader"/>.Read() Method to get the data row.
            </summary>
            <param name="aReader">Reader with data in it</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.LoadSingleRowFromReader(System.Data.SqlClient.SqlDataReader)">
            <summary>Loads a single row from a reader into the current item 
            </summary>
            <param name="aReader">Opened reader containing a row with the item data</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.LoadFromReader(System.Data.SqlClient.SqlDataReader,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Returns a list of <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue"/> objects that has been read from the submitted reader 
            </summary>
            <param name="aReader">Well configured reader with data rows in it</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>A list of <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue"/> objects</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.LoadCustomized(System.String,System.String,Sensirion.Data.DB.IExecuteQuery,Sensirion.Data.DB.SQLHelper.ParameterType[])">
            <summary>Returns a list of items. The caller can submit a customized from and where clause to select a specific set of items
            </summary>
            <param name="aCustomWhere">WHERE clause (can be submitted with or without the word 'WHERE')</param>
            <param name="aAdditionalFrom">Additional tables or joins to match the WHERE clause</param>
            <param name="aParameters"><see cref="T:System.Array"/> of parameters to customize the query if needed</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>A list containing all selected items</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.LoadCustomized(System.String,System.String,System.Int32,Sensirion.Data.DB.IExecuteQuery,Sensirion.Data.DB.SQLHelper.ParameterType[])">
            <summary>Returns a list of items. The caller can submit a customized from and where clause to select a specific set of items
            </summary>
            <param name="aCustomWhere">WHERE clause (can be submitted with or without the word 'WHERE')</param>
            <param name="aAdditionalFrom">Additional tables or joins to match the WHERE clause. The additional piece
              will be attached after the table name. So the first sign must be a semicolon
             </param>
            <param name="aParameters"><see cref="T:System.Array"/> of parameters to customize the query if needed</param>
            <param name="aCount">Count of max data rows to get (TOP Statement). If count is 0 or less no TOP Statement will be used</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>A list containing all selected items</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.LoadCustomized(System.String,System.String,System.Int32,Sensirion.Data.DB.IExecuteQuery,System.Boolean,Sensirion.Data.DB.SQLHelper.ParameterType[])">
            <summary>Returns a list of items. The caller can submit a customized from and where clause to select a specific set of items
            </summary>
            <param name="aCustomWhere">WHERE clause (can be submitted with or without the word 'WHERE')</param>
            <param name="aAdditionalFrom">Additional tables or joins to match the WHERE clause. The additional piece
              will be attached after the table name. So the first sign must be a semicolon
             </param>
            <param name="aParameters"><see cref="T:System.Array"/> of parameters to customize the query if needed</param>
            <param name="aCount">Count of max data rows to get (TOP Statement). If count is 0 or less no TOP Statement will be used</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <param name="aUseDistinct">If <see langword="true"/> the query will use the <c>SELECT DISTINCT</c> syntax</param>
            <returns>A list containing all selected items</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.LoadFromDataMeaning(System.String,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Loads a list of <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue"/> from a given <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.DataMeaning"/> 
            </summary>
            <param name="aDataMeaning">Key to load for</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>List of <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue"/> or an empty list if no <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue"/> exists with the given <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.DataMeaning"/></returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.LoadSingleFromDataMeaning(System.String,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Loads the first found <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue"/> from a given <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.DataMeaning"/> 
            </summary>
            <param name="aDataMeaning">Key to load for</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>A <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue"/> or <see langword="null"/> if no <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue"/> exists with the given <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.DataMeaning"/></returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.LoadFromSinkId(System.Int32,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Loads a list of <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue"/> from a given <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.SinkId"/> 
            </summary>
            <param name="aSinkId">Key to load for</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>List of <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue"/> or an empty list if no <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue"/> exists with the given <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.SinkId"/></returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.LoadSingleFromSinkId(System.Int32,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Loads the first found <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue"/> from a given <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.SinkId"/> 
            </summary>
            <param name="aSinkId">Key to load for</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>A <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue"/> or <see langword="null"/> if no <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue"/> exists with the given <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.SinkId"/></returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.LoadFromSourceApplicationId(System.Int32,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Loads a list of <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue"/> from a given <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.SourceApplicationId"/> 
            </summary>
            <param name="aSourceApplicationId">Key to load for</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>List of <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue"/> or an empty list if no <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue"/> exists with the given <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.SourceApplicationId"/></returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.LoadSingleFromSourceApplicationId(System.Int32,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Loads the first found <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue"/> from a given <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.SourceApplicationId"/> 
            </summary>
            <param name="aSourceApplicationId">Key to load for</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>A <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue"/> or <see langword="null"/> if no <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue"/> exists with the given <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.SourceApplicationId"/></returns>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.IsNew">
            <summary>Indicates whether the object is new or exists already on the database
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.Delete">
            <summary>Deletes the element from the database
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.Delete(System.Int32,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Deletes a element from the database 
            </summary>
            <param name="aId">Primary key of the object to delete</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.Update">
            <summary>Updates the element on the database with the new values 
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.Create">
            <summary>Creates a new <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue"/> in the Database and returns the identity column in the id property
            </summary>
            <exception cref="T:System.Data.MissingPrimaryKeyException">Thrown, if the identity could not read back</exception>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.NewDispatchQueue(System.Int32,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Creates a new item with the given id 
            </summary>
            <param name="aId">ID that the item should have</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>new empty instance (only id is set)</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.GetDispatchQueue(System.Int32,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Reads an element from the database
            </summary>
            <param name="aId">Primary key of the element to read</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>A <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue"/> object that represents the read element</returns>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue._DispatchQueueId">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.DispatchQueueId"/> Property.
            <para>Primary Key
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.DispatchQueueId"/> field in the table t_DispatchQueue</para>
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.DispatchQueueId">
            <summary>Primary Key
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.DispatchQueueId"/> field in the table t_DispatchQueue
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue._DataMeaning">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.DataMeaning"/> Property.
            <para>Data Meaning used to match data with its Sink
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.DataMeaning"/> field in the table t_DispatchQueue</para>
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.DataMeaning">
            <summary>Data Meaning used to match data with its Sink
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.DataMeaning"/> field in the table t_DispatchQueue
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue._SourceApplicationId">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.SourceApplicationId"/> Property.
            <para>Foreign key to a SourceApplication
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.SourceApplicationId"/> field in the table t_DispatchQueue</para>
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.SourceApplicationId">
            <summary>Foreign key to a SourceApplication
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.SourceApplicationId"/> field in the table t_DispatchQueue
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue._SinkId">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.SinkId"/> Property.
            <para>Foreign key to a Sink
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.SinkId"/> field in the table t_DispatchQueue</para>
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.SinkId">
            <summary>Foreign key to a Sink
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.SinkId"/> field in the table t_DispatchQueue
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.LoadAllDepending(System.Boolean)">
            <summary>Loads ALL Foreign Key related elements. This can be very time consuming
            </summary>
            <param name="aDeep"><see langword="true"/>, if depending elements of sub elements should be loaded too</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.LoadAllDepending(System.Int32)">
            <summary>Loads ALL Foreign Key related elements. This can be very time consuming
            </summary>
            <param name="aDepth">Limits the level to load all depending objects (-1 means all level)</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.Save(System.Int32)">
            <summary>Saves the Element to the db. If the element does not exists, a new data row will be
              inserted. Otherwise the existing row will be updated with the new values.
              <para>The element does not perform an update, if the modified flag is not <see langword="true"/>.
              </para>
            </summary>
            <param name="aDepth">Levels to be saved.
              <para>
                <list type="bullet">
                  <item>
                    <description>A Level of 0 means, that no dependent objects will be saved</description>
                  </item><item>
                    <description>Level of 1 means, all depending objects will be saved but not deep.</description>
                  </item><item>
                    <description>Level of two means, that all depending objects and all their depending objects will be saved.</description>
                  </item><item>
                    <description>Level of -1 means, that all depending objects will be saved deep (unlimited level).</description>
                  </item>
                </list>
              </para>
            </param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.UpdateDependentObjectsWithID(System.Int32)">
            <summary>Updates all depending objects with the ID of the current object 
            </summary>
            <param name="aDepth"><see langword="true"/>, if the depending elements will be updated too</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.ResetId(System.Int32)">
            <summary>Marks the object as new if it has not been loaded from database
              This can be useful, if a transaction has been rolled back and all the objects
              must be saved again. If some actions has been taken before and some objects got an Id
              they must be reseted to be new, because the received Id does not exists anymore
              on the database and a identity violation will occur if the object is saved again.
            </summary>
            <param name="aDepth">The level to which the reset will be done (-1 = all level)</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.WritePropertiesToStream(System.IO.MemoryStream)">
            <summary>Writes the binary representation of all db properties 
              to the passed <paramref name="aSerializeStream"/> for 
              the calculation of the hash. The calculation includes all
              NOT foreign key columns.
            </summary>
            <param name="aSerializeStream">Stream where the db properties 
              has to be serialized for hash calculation.
            </param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.GetDataAsArray">
            <summary>Get all data (without primary key and computed entries) as array.
            The order of the data in the array matches FIELD_NAMES_WITHOUT_PRIMARY_ARRAY.
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue.GetDataColumnTypes">
            <summary>Get all column names (without primary key and computed entries) with their non-nullable data type.
            The order of the data in the array matches the FIELD_NAMES_WITHOUT_PRIMARY_ARRAY.
            </summary>
        </member>
        <member name="T:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration">
            <summary>This object represents the properties and methods of a the table FileShareConfiguration.
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.SelectFileShareConfigurationByAppKey(System.String)">
            <summary> Find the configuration stored in the DB for the file export of the given application and save it to <c>this</c>
            </summary>
            <param name="appKey">The key identifying the application</param>
            <returns>True if the configuration was found, false otherwise.</returns>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.FIELD_NAMES">
            <summary>Comma separated list with all fields that are contained in the class. This also contains identity and computed fields.
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.FIELD_NAMES_WITH_ALIAS">
            <summary>Comma separated list with all fields that are contained in the class with table name as alias.This also contains identity and computed fields.
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.DEFAULT_ALIAS">
            <summary>table name used as alias in the <see cref="F:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.FIELD_NAMES_WITH_ALIAS"/> const
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.FIELD_NAMES_WITHOUT_PRIMARY">
            <summary>Comma separated list with all fields (except the primary key and the computed columns) that are contained in the class 
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.FIELD_NAMES_ARRAY">
            <summary><see cref="T:System.Array"/> with all fields that are contained in the class 
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.FIELD_NAMES_WITHOUT_PRIMARY_ARRAY">
            <summary><see cref="T:System.Array"/> with all fields (except the primary key and the computed columns) that are contained in the class 
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.FROM_TABLE_FULL_NAME">
            <summary>Constant that contains the table name for the FROM Statement
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.FROM_TABLE_FULL_NAME_WITH_DEFAULT_ALIAS">
            <summary>Constant that contains the table name for the FROM Statement
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.SCHEMA_NAME">
            <summary>Constant that contains the name of the Schema where the table resists
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.TABLE_NAME">
            <summary>Constant that contains the table name for the FROM Statement
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.FILESHARECONFIGURATIONID_FIELD_NAME">
            <summary>Constant that represents the field name corresponding to the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.FileShareConfigurationId"/> property
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.ROOTPATH_FIELD_NAME">
            <summary>Constant that represents the field name corresponding to the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.RootPath"/> property
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.DESCRIPTION_FIELD_NAME">
            <summary>Constant that represents the field name corresponding to the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.Description"/> property
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.MINRETENTIONDAYSAFTERUPLOAD_FIELD_NAME">
            <summary>Constant that represents the field name corresponding to the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.MinRetentionDaysAfterUpload"/> property
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.REPORTINGSERVICEKEY_FIELD_NAME">
            <summary>Constant that represents the field name corresponding to the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.ReportingServiceKey"/> property
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.NOT_CREATED_ON_DATABASE_ID">
            <summary>Id of a object that has not been created on the database. If first time saved
              the object will become a different id
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.GetFromWithAlias(System.String)">
            <summary>Gets the from clause with a defined alias. If just a common alias is used there is a constant
              to get a default aliased list of fields <see cref="F:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.FIELD_NAMES_WITH_ALIAS"/>
            </summary>
            <param name="aAlias">Alias to be used</param>
            <returns>List of field names with the alias</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.#ctor(Sensirion.Data.DB.IExecuteQuery)">
            <summary>Creates a new instance 
            </summary>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.#ctor(System.Int32,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Creates a new instance and reads the data row with the submitted <paramref name="aId"/> into the instance 
            </summary>
            <param name="aId">Id of the data row (primary key)</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <exception cref="T:System.Data.DataException">Thrown if a element with the given id does not exists on the database</exception>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.#ctor(System.Data.SqlClient.SqlDataReader)">
            <summary>Reads the element from a reader submitted by the caller. The method 
               executes the <paramref name="aReader"/>.Read() Method to get the data row.
            </summary>
            <param name="aReader">Reader with data in it</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.LoadSingleRowFromReader(System.Data.SqlClient.SqlDataReader)">
            <summary>Loads a single row from a reader into the current item 
            </summary>
            <param name="aReader">Opened reader containing a row with the item data</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.LoadFromReader(System.Data.SqlClient.SqlDataReader,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Returns a list of <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration"/> objects that has been read from the submitted reader 
            </summary>
            <param name="aReader">Well configured reader with data rows in it</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>A list of <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration"/> objects</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.LoadCustomized(System.String,System.String,Sensirion.Data.DB.IExecuteQuery,Sensirion.Data.DB.SQLHelper.ParameterType[])">
            <summary>Returns a list of items. The caller can submit a customized from and where clause to select a specific set of items
            </summary>
            <param name="aCustomWhere">WHERE clause (can be submitted with or without the word 'WHERE')</param>
            <param name="aAdditionalFrom">Additional tables or joins to match the WHERE clause</param>
            <param name="aParameters"><see cref="T:System.Array"/> of parameters to customize the query if needed</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>A list containing all selected items</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.LoadCustomized(System.String,System.String,System.Int32,Sensirion.Data.DB.IExecuteQuery,Sensirion.Data.DB.SQLHelper.ParameterType[])">
            <summary>Returns a list of items. The caller can submit a customized from and where clause to select a specific set of items
            </summary>
            <param name="aCustomWhere">WHERE clause (can be submitted with or without the word 'WHERE')</param>
            <param name="aAdditionalFrom">Additional tables or joins to match the WHERE clause. The additional piece
              will be attached after the table name. So the first sign must be a semicolon
             </param>
            <param name="aParameters"><see cref="T:System.Array"/> of parameters to customize the query if needed</param>
            <param name="aCount">Count of max data rows to get (TOP Statement). If count is 0 or less no TOP Statement will be used</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>A list containing all selected items</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.LoadCustomized(System.String,System.String,System.Int32,Sensirion.Data.DB.IExecuteQuery,System.Boolean,Sensirion.Data.DB.SQLHelper.ParameterType[])">
            <summary>Returns a list of items. The caller can submit a customized from and where clause to select a specific set of items
            </summary>
            <param name="aCustomWhere">WHERE clause (can be submitted with or without the word 'WHERE')</param>
            <param name="aAdditionalFrom">Additional tables or joins to match the WHERE clause. The additional piece
              will be attached after the table name. So the first sign must be a semicolon
             </param>
            <param name="aParameters"><see cref="T:System.Array"/> of parameters to customize the query if needed</param>
            <param name="aCount">Count of max data rows to get (TOP Statement). If count is 0 or less no TOP Statement will be used</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <param name="aUseDistinct">If <see langword="true"/> the query will use the <c>SELECT DISTINCT</c> syntax</param>
            <returns>A list containing all selected items</returns>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.IsNew">
            <summary>Indicates whether the object is new or exists already on the database
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.Delete">
            <summary>Deletes the element from the database
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.Delete(System.Int32,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Deletes a element from the database 
            </summary>
            <param name="aId">Primary key of the object to delete</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.Update">
            <summary>Updates the element on the database with the new values 
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.Create">
            <summary>Creates a new <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration"/> in the Database and returns the identity column in the id property
            </summary>
            <exception cref="T:System.Data.MissingPrimaryKeyException">Thrown, if the identity could not read back</exception>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.NewFileShareConfiguration(System.Int32,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Creates a new item with the given id 
            </summary>
            <param name="aId">ID that the item should have</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>new empty instance (only id is set)</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.GetFileShareConfiguration(System.Int32,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Reads an element from the database
            </summary>
            <param name="aId">Primary key of the element to read</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>A <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration"/> object that represents the read element</returns>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration._FileShareConfigurationId">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.FileShareConfigurationId"/> Property.
            <para>Primary key
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.FileShareConfigurationId"/> field in the table t_FileShareConfiguration</para>
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.FileShareConfigurationId">
            <summary>Primary key
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.FileShareConfigurationId"/> field in the table t_FileShareConfiguration
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration._RootPath">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.RootPath"/> Property.
            <para>Root absolute path
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.RootPath"/> field in the table t_FileShareConfiguration</para>
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.RootPath">
            <summary>Root absolute path
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.RootPath"/> field in the table t_FileShareConfiguration
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration._Description">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.Description"/> Property.
            <para>Description
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.Description"/> field in the table t_FileShareConfiguration</para>
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.Description">
            <summary>Description
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.Description"/> field in the table t_FileShareConfiguration
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration._MinRetentionDaysAfterUpload">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.MinRetentionDaysAfterUpload"/> Property.
            <para>Minimum number of days to keep the files after upload
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.MinRetentionDaysAfterUpload"/> field in the table t_FileShareConfiguration</para>
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.MinRetentionDaysAfterUpload">
            <summary>Minimum number of days to keep the files after upload
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.MinRetentionDaysAfterUpload"/> field in the table t_FileShareConfiguration
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration._ReportingServiceKey">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.ReportingServiceKey"/> Property.
            <para>Reporting Service project Id
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.ReportingServiceKey"/> field in the table t_FileShareConfiguration</para>
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.ReportingServiceKey">
            <summary>Reporting Service project Id
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.ReportingServiceKey"/> field in the table t_FileShareConfiguration
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration._SourceApplicationsConfiguration">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.SourceApplicationsConfiguration"/> Property.
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.SourceApplicationsConfiguration">
            <summary>Represents the items subordinated to the t_FileShareConfiguration table
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.LoadAllConfigurationSourceApplication(System.Boolean)">
            <summary>Loads all the <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication"/> from the t_FileShareConfiguration
            </summary>
            <param name="aDeep">True, if the depending elements will be loaded too</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.LoadAllConfigurationSourceApplication(System.Int32)">
            <summary>Loads all the <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication"/> from the t_FileShareConfiguration
            </summary>
            <param name="aDepth">Limits the level to load all depending objects (-1 means all, 0 means no objects).
              To load only the first level call it with 1.</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.AddNewConfigurationSourceApplication(Sensirion.Data.DB.IExecuteQuery)">
            <summary>Adds a new <c>Configuration.SourceApplication</c> to the <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration"/>
            </summary>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.LoadAllDepending(System.Boolean)">
            <summary>Loads ALL Foreign Key related elements. This can be very time consuming
            </summary>
            <param name="aDeep"><see langword="true"/>, if depending elements of sub elements should be loaded too</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.LoadAllDepending(System.Int32)">
            <summary>Loads ALL Foreign Key related elements. This can be very time consuming
            </summary>
            <param name="aDepth">Limits the level to load all depending objects (-1 means all level)</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.Save(System.Int32)">
            <summary>Saves the Element to the db. If the element does not exists, a new data row will be
              inserted. Otherwise the existing row will be updated with the new values.
              <para>The element does not perform an update, if the modified flag is not <see langword="true"/>.
              </para>
            </summary>
            <param name="aDepth">Levels to be saved.
              <para>
                <list type="bullet">
                  <item>
                    <description>A Level of 0 means, that no dependent objects will be saved</description>
                  </item><item>
                    <description>Level of 1 means, all depending objects will be saved but not deep.</description>
                  </item><item>
                    <description>Level of two means, that all depending objects and all their depending objects will be saved.</description>
                  </item><item>
                    <description>Level of -1 means, that all depending objects will be saved deep (unlimited level).</description>
                  </item>
                </list>
              </para>
            </param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.UpdateDependentObjectsWithID(System.Int32)">
            <summary>Updates all depending objects with the ID of the current object 
            </summary>
            <param name="aDepth"><see langword="true"/>, if the depending elements will be updated too</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.ResetId(System.Int32)">
            <summary>Marks the object as new if it has not been loaded from database
              This can be useful, if a transaction has been rolled back and all the objects
              must be saved again. If some actions has been taken before and some objects got an Id
              they must be reseted to be new, because the received Id does not exists anymore
              on the database and a identity violation will occur if the object is saved again.
            </summary>
            <param name="aDepth">The level to which the reset will be done (-1 = all level)</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.WritePropertiesToStream(System.IO.MemoryStream)">
            <summary>Writes the binary representation of all db properties 
              to the passed <paramref name="aSerializeStream"/> for 
              the calculation of the hash. The calculation includes all
              NOT foreign key columns.
            </summary>
            <param name="aSerializeStream">Stream where the db properties 
              has to be serialized for hash calculation.
            </param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.GetDataAsArray">
            <summary>Get all data (without primary key and computed entries) as array.
            The order of the data in the array matches FIELD_NAMES_WITHOUT_PRIMARY_ARRAY.
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration.GetDataColumnTypes">
            <summary>Get all column names (without primary key and computed entries) with their non-nullable data type.
            The order of the data in the array matches the FIELD_NAMES_WITHOUT_PRIMARY_ARRAY.
            </summary>
        </member>
        <member name="T:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication">
            <summary>This object represents the properties and methods of a the table SourceApplication.
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.FindIdByAppKey(System.String)">
            <summary>
             Find an application id given the key.
            </summary>
            <param name="appKey">The application key.</param>
            <returns>The source application Id, or <c>null</c> if the appKey was not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.FindAppKeyFromGuid(System.Guid)">
            <summary>
             Find an application key given a request.
            </summary>
            <param name="guid">The request identifier.</param>
            <returns>The source application key, or <c>null</c> if the guid was not found</returns>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.FIELD_NAMES">
            <summary>Comma separated list with all fields that are contained in the class. This also contains identity and computed fields.
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.FIELD_NAMES_WITH_ALIAS">
            <summary>Comma separated list with all fields that are contained in the class with table name as alias.This also contains identity and computed fields.
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.DEFAULT_ALIAS">
            <summary>table name used as alias in the <see cref="F:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.FIELD_NAMES_WITH_ALIAS"/> const
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.FIELD_NAMES_WITHOUT_PRIMARY">
            <summary>Comma separated list with all fields (except the primary key and the computed columns) that are contained in the class 
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.FIELD_NAMES_ARRAY">
            <summary><see cref="T:System.Array"/> with all fields that are contained in the class 
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.FIELD_NAMES_WITHOUT_PRIMARY_ARRAY">
            <summary><see cref="T:System.Array"/> with all fields (except the primary key and the computed columns) that are contained in the class 
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.FROM_TABLE_FULL_NAME">
            <summary>Constant that contains the table name for the FROM Statement
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.FROM_TABLE_FULL_NAME_WITH_DEFAULT_ALIAS">
            <summary>Constant that contains the table name for the FROM Statement
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.SCHEMA_NAME">
            <summary>Constant that contains the name of the Schema where the table resists
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.TABLE_NAME">
            <summary>Constant that contains the table name for the FROM Statement
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.SOURCEAPPLICATIONID_FIELD_NAME">
            <summary>Constant that represents the field name corresponding to the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.SourceApplicationId"/> property
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.APPKEY_FIELD_NAME">
            <summary>Constant that represents the field name corresponding to the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.AppKey"/> property
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.FILESHARECONFIGURATIONID_FIELD_NAME">
            <summary>Constant that represents the field name corresponding to the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.FileShareConfigurationId"/> property
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.NOT_CREATED_ON_DATABASE_ID">
            <summary>Id of a object that has not been created on the database. If first time saved
              the object will become a different id
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.GetFromWithAlias(System.String)">
            <summary>Gets the from clause with a defined alias. If just a common alias is used there is a constant
              to get a default aliased list of fields <see cref="F:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.FIELD_NAMES_WITH_ALIAS"/>
            </summary>
            <param name="aAlias">Alias to be used</param>
            <returns>List of field names with the alias</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.#ctor(Sensirion.Data.DB.IExecuteQuery)">
            <summary>Creates a new instance 
            </summary>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.#ctor(System.Int32,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Creates a new instance and reads the data row with the submitted <paramref name="aId"/> into the instance 
            </summary>
            <param name="aId">Id of the data row (primary key)</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <exception cref="T:System.Data.DataException">Thrown if a element with the given id does not exists on the database</exception>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.#ctor(System.Data.SqlClient.SqlDataReader)">
            <summary>Reads the element from a reader submitted by the caller. The method 
               executes the <paramref name="aReader"/>.Read() Method to get the data row.
            </summary>
            <param name="aReader">Reader with data in it</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.LoadSingleRowFromReader(System.Data.SqlClient.SqlDataReader)">
            <summary>Loads a single row from a reader into the current item 
            </summary>
            <param name="aReader">Opened reader containing a row with the item data</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.LoadFromReader(System.Data.SqlClient.SqlDataReader,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Returns a list of <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication"/> objects that has been read from the submitted reader 
            </summary>
            <param name="aReader">Well configured reader with data rows in it</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>A list of <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication"/> objects</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.LoadCustomized(System.String,System.String,Sensirion.Data.DB.IExecuteQuery,Sensirion.Data.DB.SQLHelper.ParameterType[])">
            <summary>Returns a list of items. The caller can submit a customized from and where clause to select a specific set of items
            </summary>
            <param name="aCustomWhere">WHERE clause (can be submitted with or without the word 'WHERE')</param>
            <param name="aAdditionalFrom">Additional tables or joins to match the WHERE clause</param>
            <param name="aParameters"><see cref="T:System.Array"/> of parameters to customize the query if needed</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>A list containing all selected items</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.LoadCustomized(System.String,System.String,System.Int32,Sensirion.Data.DB.IExecuteQuery,Sensirion.Data.DB.SQLHelper.ParameterType[])">
            <summary>Returns a list of items. The caller can submit a customized from and where clause to select a specific set of items
            </summary>
            <param name="aCustomWhere">WHERE clause (can be submitted with or without the word 'WHERE')</param>
            <param name="aAdditionalFrom">Additional tables or joins to match the WHERE clause. The additional piece
              will be attached after the table name. So the first sign must be a semicolon
             </param>
            <param name="aParameters"><see cref="T:System.Array"/> of parameters to customize the query if needed</param>
            <param name="aCount">Count of max data rows to get (TOP Statement). If count is 0 or less no TOP Statement will be used</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>A list containing all selected items</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.LoadCustomized(System.String,System.String,System.Int32,Sensirion.Data.DB.IExecuteQuery,System.Boolean,Sensirion.Data.DB.SQLHelper.ParameterType[])">
            <summary>Returns a list of items. The caller can submit a customized from and where clause to select a specific set of items
            </summary>
            <param name="aCustomWhere">WHERE clause (can be submitted with or without the word 'WHERE')</param>
            <param name="aAdditionalFrom">Additional tables or joins to match the WHERE clause. The additional piece
              will be attached after the table name. So the first sign must be a semicolon
             </param>
            <param name="aParameters"><see cref="T:System.Array"/> of parameters to customize the query if needed</param>
            <param name="aCount">Count of max data rows to get (TOP Statement). If count is 0 or less no TOP Statement will be used</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <param name="aUseDistinct">If <see langword="true"/> the query will use the <c>SELECT DISTINCT</c> syntax</param>
            <returns>A list containing all selected items</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.LoadFromAppKey(System.String,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Loads a list of <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication"/> from a given <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.AppKey"/> 
            </summary>
            <param name="aAppKey">Key to load for</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>List of <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication"/> or an empty list if no <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication"/> exists with the given <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.AppKey"/></returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.LoadSingleFromAppKey(System.String,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Loads the first found <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication"/> from a given <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.AppKey"/> 
            </summary>
            <param name="aAppKey">Key to load for</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>A <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication"/> or <see langword="null"/> if no <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication"/> exists with the given <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.AppKey"/></returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.LoadFromFileShareConfigurationId(System.Nullable{System.Int32},Sensirion.Data.DB.IExecuteQuery)">
            <summary>Loads a list of <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication"/> from a given <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.FileShareConfigurationId"/> 
            </summary>
            <param name="aFileShareConfigurationId">Key to load for</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>List of <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication"/> or an empty list if no <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication"/> exists with the given <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.FileShareConfigurationId"/></returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.LoadSingleFromFileShareConfigurationId(System.Nullable{System.Int32},Sensirion.Data.DB.IExecuteQuery)">
            <summary>Loads the first found <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication"/> from a given <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.FileShareConfigurationId"/> 
            </summary>
            <param name="aFileShareConfigurationId">Key to load for</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>A <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication"/> or <see langword="null"/> if no <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication"/> exists with the given <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.FileShareConfigurationId"/></returns>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.IsNew">
            <summary>Indicates whether the object is new or exists already on the database
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.Delete">
            <summary>Deletes the element from the database
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.Delete(System.Int32,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Deletes a element from the database 
            </summary>
            <param name="aId">Primary key of the object to delete</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.Update">
            <summary>Updates the element on the database with the new values 
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.Create">
            <summary>Creates a new <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication"/> in the Database and returns the identity column in the id property
            </summary>
            <exception cref="T:System.Data.MissingPrimaryKeyException">Thrown, if the identity could not read back</exception>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.NewSourceApplication(System.Int32,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Creates a new item with the given id 
            </summary>
            <param name="aId">ID that the item should have</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>new empty instance (only id is set)</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.GetSourceApplication(System.Int32,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Reads an element from the database
            </summary>
            <param name="aId">Primary key of the element to read</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>A <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication"/> object that represents the read element</returns>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication._SourceApplicationId">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.SourceApplicationId"/> Property.
            <para>Primary key
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.SourceApplicationId"/> field in the table t_SourceApplication</para>
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.SourceApplicationId">
            <summary>Primary key
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.SourceApplicationId"/> field in the table t_SourceApplication
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication._AppKey">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.AppKey"/> Property.
            <para>Application identifier
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.AppKey"/> field in the table t_SourceApplication</para>
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.AppKey">
            <summary>Application identifier
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.AppKey"/> field in the table t_SourceApplication
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication._FileShareConfigurationId">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.FileShareConfigurationId"/> Property.
            <para>Foreign key to a FileShareConfiguration
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.FileShareConfigurationId"/> field in the table t_SourceApplication</para>
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.FileShareConfigurationId">
            <summary>Foreign key to a FileShareConfiguration
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.FileShareConfigurationId"/> field in the table t_SourceApplication
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication._DispatchQueuesConfiguration">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.DispatchQueuesConfiguration"/> Property.
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.DispatchQueuesConfiguration">
            <summary>Represents the items subordinated to the t_SourceApplication table
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.LoadAllConfigurationDispatchQueue(System.Boolean)">
            <summary>Loads all the <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue"/> from the t_SourceApplication
            </summary>
            <param name="aDeep">True, if the depending elements will be loaded too</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.LoadAllConfigurationDispatchQueue(System.Int32)">
            <summary>Loads all the <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue"/> from the t_SourceApplication
            </summary>
            <param name="aDepth">Limits the level to load all depending objects (-1 means all, 0 means no objects).
              To load only the first level call it with 1.</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.AddNewConfigurationDispatchQueue(Sensirion.Data.DB.IExecuteQuery)">
            <summary>Adds a new <c>Configuration.DispatchQueue</c> to the <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication"/>
            </summary>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication._RequestsWorkInProgress">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.RequestsWorkInProgress"/> Property.
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.RequestsWorkInProgress">
            <summary>Represents the items subordinated to the t_SourceApplication table
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.LoadAllWorkInProgressRequest(System.Boolean)">
            <summary>Loads all the <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> from the t_SourceApplication
            </summary>
            <param name="aDeep">True, if the depending elements will be loaded too</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.LoadAllWorkInProgressRequest(System.Int32)">
            <summary>Loads all the <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> from the t_SourceApplication
            </summary>
            <param name="aDepth">Limits the level to load all depending objects (-1 means all, 0 means no objects).
              To load only the first level call it with 1.</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.AddNewWorkInProgressRequest(Sensirion.Data.DB.IExecuteQuery)">
            <summary>Adds a new <c>WorkInProgress.Request</c> to the <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication"/>
            </summary>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.LoadAllDepending(System.Boolean)">
            <summary>Loads ALL Foreign Key related elements. This can be very time consuming
            </summary>
            <param name="aDeep"><see langword="true"/>, if depending elements of sub elements should be loaded too</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.LoadAllDepending(System.Int32)">
            <summary>Loads ALL Foreign Key related elements. This can be very time consuming
            </summary>
            <param name="aDepth">Limits the level to load all depending objects (-1 means all level)</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.Save(System.Int32)">
            <summary>Saves the Element to the db. If the element does not exists, a new data row will be
              inserted. Otherwise the existing row will be updated with the new values.
              <para>The element does not perform an update, if the modified flag is not <see langword="true"/>.
              </para>
            </summary>
            <param name="aDepth">Levels to be saved.
              <para>
                <list type="bullet">
                  <item>
                    <description>A Level of 0 means, that no dependent objects will be saved</description>
                  </item><item>
                    <description>Level of 1 means, all depending objects will be saved but not deep.</description>
                  </item><item>
                    <description>Level of two means, that all depending objects and all their depending objects will be saved.</description>
                  </item><item>
                    <description>Level of -1 means, that all depending objects will be saved deep (unlimited level).</description>
                  </item>
                </list>
              </para>
            </param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.UpdateDependentObjectsWithID(System.Int32)">
            <summary>Updates all depending objects with the ID of the current object 
            </summary>
            <param name="aDepth"><see langword="true"/>, if the depending elements will be updated too</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.ResetId(System.Int32)">
            <summary>Marks the object as new if it has not been loaded from database
              This can be useful, if a transaction has been rolled back and all the objects
              must be saved again. If some actions has been taken before and some objects got an Id
              they must be reseted to be new, because the received Id does not exists anymore
              on the database and a identity violation will occur if the object is saved again.
            </summary>
            <param name="aDepth">The level to which the reset will be done (-1 = all level)</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.WritePropertiesToStream(System.IO.MemoryStream)">
            <summary>Writes the binary representation of all db properties 
              to the passed <paramref name="aSerializeStream"/> for 
              the calculation of the hash. The calculation includes all
              NOT foreign key columns.
            </summary>
            <param name="aSerializeStream">Stream where the db properties 
              has to be serialized for hash calculation.
            </param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.GetDataAsArray">
            <summary>Get all data (without primary key and computed entries) as array.
            The order of the data in the array matches FIELD_NAMES_WITHOUT_PRIMARY_ARRAY.
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication.GetDataColumnTypes">
            <summary>Get all column names (without primary key and computed entries) with their non-nullable data type.
            The order of the data in the array matches the FIELD_NAMES_WITHOUT_PRIMARY_ARRAY.
            </summary>
        </member>
        <member name="T:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueueList">
            <summary>List of <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue"/> elements 
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueueList.FindByDispatchQueueId(System.Int32)">
            <summary>Finds the first <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue"/> from a given <paramref name="aDispatchQueueId"/>
            </summary>
            <param name="aDispatchQueueId">DispatchQueueId to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueueList.FindAllByDispatchQueueId(System.Int32)">
            <summary>Finds all <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue"/> from a given <paramref name="aDispatchQueueId"/>
            </summary>
            <param name="aDispatchQueueId">DispatchQueueId to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueueList.FindByDataMeaning(System.String)">
            <summary>Finds the first <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue"/> from a given <paramref name="aDataMeaning"/>
            </summary>
            <param name="aDataMeaning">DataMeaning to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueueList.FindAllByDataMeaning(System.String)">
            <summary>Finds all <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue"/> from a given <paramref name="aDataMeaning"/>
            </summary>
            <param name="aDataMeaning">DataMeaning to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueueList.FindBySourceApplicationId(System.Int32)">
            <summary>Finds the first <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue"/> from a given <paramref name="aSourceApplicationId"/>
            </summary>
            <param name="aSourceApplicationId">SourceApplicationId to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueueList.FindAllBySourceApplicationId(System.Int32)">
            <summary>Finds all <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue"/> from a given <paramref name="aSourceApplicationId"/>
            </summary>
            <param name="aSourceApplicationId">SourceApplicationId to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueueList.FindBySinkId(System.Int32)">
            <summary>Finds the first <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue"/> from a given <paramref name="aSinkId"/>
            </summary>
            <param name="aSinkId">SinkId to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueueList.FindAllBySinkId(System.Int32)">
            <summary>Finds all <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.DispatchQueue"/> from a given <paramref name="aSinkId"/>
            </summary>
            <param name="aSinkId">SinkId to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="T:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfigurationList">
            <summary>List of <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration"/> elements 
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfigurationList.FindByFileShareConfigurationId(System.Int32)">
            <summary>Finds the first <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration"/> from a given <paramref name="aFileShareConfigurationId"/>
            </summary>
            <param name="aFileShareConfigurationId">FileShareConfigurationId to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfigurationList.FindAllByFileShareConfigurationId(System.Int32)">
            <summary>Finds all <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration"/> from a given <paramref name="aFileShareConfigurationId"/>
            </summary>
            <param name="aFileShareConfigurationId">FileShareConfigurationId to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfigurationList.FindByRootPath(System.String)">
            <summary>Finds the first <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration"/> from a given <paramref name="aRootPath"/>
            </summary>
            <param name="aRootPath">RootPath to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfigurationList.FindAllByRootPath(System.String)">
            <summary>Finds all <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration"/> from a given <paramref name="aRootPath"/>
            </summary>
            <param name="aRootPath">RootPath to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfigurationList.FindByDescription(System.String)">
            <summary>Finds the first <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration"/> from a given <paramref name="aDescription"/>
            </summary>
            <param name="aDescription">Description to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfigurationList.FindAllByDescription(System.String)">
            <summary>Finds all <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration"/> from a given <paramref name="aDescription"/>
            </summary>
            <param name="aDescription">Description to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfigurationList.FindByMinRetentionDaysAfterUpload(System.Nullable{System.Int32})">
            <summary>Finds the first <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration"/> from a given <paramref name="aMinRetentionDaysAfterUpload"/>
            </summary>
            <param name="aMinRetentionDaysAfterUpload">MinRetentionDaysAfterUpload to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfigurationList.FindAllByMinRetentionDaysAfterUpload(System.Nullable{System.Int32})">
            <summary>Finds all <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration"/> from a given <paramref name="aMinRetentionDaysAfterUpload"/>
            </summary>
            <param name="aMinRetentionDaysAfterUpload">MinRetentionDaysAfterUpload to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfigurationList.FindByReportingServiceKey(System.String)">
            <summary>Finds the first <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration"/> from a given <paramref name="aReportingServiceKey"/>
            </summary>
            <param name="aReportingServiceKey">ReportingServiceKey to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfigurationList.FindAllByReportingServiceKey(System.String)">
            <summary>Finds all <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.FileShareConfiguration"/> from a given <paramref name="aReportingServiceKey"/>
            </summary>
            <param name="aReportingServiceKey">ReportingServiceKey to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="T:Sensirion.Hummer.DbAccess.Data.Configuration.SinkList">
            <summary>List of <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.Sink"/> elements 
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SinkList.FindBySinkId(System.Int32)">
            <summary>Finds the first <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.Sink"/> from a given <paramref name="aSinkId"/>
            </summary>
            <param name="aSinkId">SinkId to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SinkList.FindAllBySinkId(System.Int32)">
            <summary>Finds all <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.Sink"/> from a given <paramref name="aSinkId"/>
            </summary>
            <param name="aSinkId">SinkId to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SinkList.FindByHostCategory(System.String)">
            <summary>Finds the first <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.Sink"/> from a given <paramref name="aHostCategory"/>
            </summary>
            <param name="aHostCategory">HostCategory to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SinkList.FindAllByHostCategory(System.String)">
            <summary>Finds all <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.Sink"/> from a given <paramref name="aHostCategory"/>
            </summary>
            <param name="aHostCategory">HostCategory to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SinkList.FindByBaseUrl(System.String)">
            <summary>Finds the first <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.Sink"/> from a given <paramref name="aBaseUrl"/>
            </summary>
            <param name="aBaseUrl">BaseUrl to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SinkList.FindAllByBaseUrl(System.String)">
            <summary>Finds all <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.Sink"/> from a given <paramref name="aBaseUrl"/>
            </summary>
            <param name="aBaseUrl">BaseUrl to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SinkList.FindByName(System.String)">
            <summary>Finds the first <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.Sink"/> from a given <paramref name="aName"/>
            </summary>
            <param name="aName">Name to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SinkList.FindAllByName(System.String)">
            <summary>Finds all <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.Sink"/> from a given <paramref name="aName"/>
            </summary>
            <param name="aName">Name to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SinkList.FindByUsername(System.String)">
            <summary>Finds the first <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.Sink"/> from a given <paramref name="aUsername"/>
            </summary>
            <param name="aUsername">Username to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SinkList.FindAllByUsername(System.String)">
            <summary>Finds all <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.Sink"/> from a given <paramref name="aUsername"/>
            </summary>
            <param name="aUsername">Username to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SinkList.FindByPassword(System.String)">
            <summary>Finds the first <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.Sink"/> from a given <paramref name="aPassword"/>
            </summary>
            <param name="aPassword">Password to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SinkList.FindAllByPassword(System.String)">
            <summary>Finds all <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.Sink"/> from a given <paramref name="aPassword"/>
            </summary>
            <param name="aPassword">Password to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SinkList.FindByStaticMetadata(System.String)">
            <summary>Finds the first <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.Sink"/> from a given <paramref name="aStaticMetadata"/>
            </summary>
            <param name="aStaticMetadata">StaticMetadata to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SinkList.FindAllByStaticMetadata(System.String)">
            <summary>Finds all <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.Sink"/> from a given <paramref name="aStaticMetadata"/>
            </summary>
            <param name="aStaticMetadata">StaticMetadata to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="T:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplicationList">
            <summary>List of <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication"/> elements 
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplicationList.FindBySourceApplicationId(System.Int32)">
            <summary>Finds the first <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication"/> from a given <paramref name="aSourceApplicationId"/>
            </summary>
            <param name="aSourceApplicationId">SourceApplicationId to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplicationList.FindAllBySourceApplicationId(System.Int32)">
            <summary>Finds all <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication"/> from a given <paramref name="aSourceApplicationId"/>
            </summary>
            <param name="aSourceApplicationId">SourceApplicationId to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplicationList.FindByAppKey(System.String)">
            <summary>Finds the first <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication"/> from a given <paramref name="aAppKey"/>
            </summary>
            <param name="aAppKey">AppKey to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplicationList.FindAllByAppKey(System.String)">
            <summary>Finds all <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication"/> from a given <paramref name="aAppKey"/>
            </summary>
            <param name="aAppKey">AppKey to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplicationList.FindByFileShareConfigurationId(System.Nullable{System.Int32})">
            <summary>Finds the first <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication"/> from a given <paramref name="aFileShareConfigurationId"/>
            </summary>
            <param name="aFileShareConfigurationId">FileShareConfigurationId to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplicationList.FindAllByFileShareConfigurationId(System.Nullable{System.Int32})">
            <summary>Finds all <see cref="T:Sensirion.Hummer.DbAccess.Data.Configuration.SourceApplication"/> from a given <paramref name="aFileShareConfigurationId"/>
            </summary>
            <param name="aFileShareConfigurationId">FileShareConfigurationId to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job">
            <summary>This object represents the properties and methods of a the table Job.
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.Status">
            <inheritdoc />
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.Sink">
            <inheritdoc />
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.UpdateStatus(System.DateTime,Sensirion.Hummer.Interfaces.DataObject.JobStatus)">
            <summary>Update the status of any job matching <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.JobId"/>. 
            </summary>
            <param name="currentTime">The current time</param>
            <param name="status">The status to set</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.SelectSink">
            <summary>Query the sink for the current job.
            </summary>
            <returns>The sink</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.IncrementRetryNumber">
            <summary>
            Increment the job retry number by 1.
            </summary>
            <returns>The retry number</returns>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.FIELD_NAMES">
            <summary>Comma separated list with all fields that are contained in the class. This also contains identity and computed fields.
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.FIELD_NAMES_WITH_ALIAS">
            <summary>Comma separated list with all fields that are contained in the class with table name as alias.This also contains identity and computed fields.
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.DEFAULT_ALIAS">
            <summary>table name used as alias in the <see cref="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.FIELD_NAMES_WITH_ALIAS"/> const
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.FIELD_NAMES_WITHOUT_PRIMARY">
            <summary>Comma separated list with all fields (except the primary key and the computed columns) that are contained in the class 
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.FIELD_NAMES_ARRAY">
            <summary><see cref="T:System.Array"/> with all fields that are contained in the class 
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.FIELD_NAMES_WITHOUT_PRIMARY_ARRAY">
            <summary><see cref="T:System.Array"/> with all fields (except the primary key and the computed columns) that are contained in the class 
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.FROM_TABLE_FULL_NAME">
            <summary>Constant that contains the table name for the FROM Statement
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.FROM_TABLE_FULL_NAME_WITH_DEFAULT_ALIAS">
            <summary>Constant that contains the table name for the FROM Statement
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.SCHEMA_NAME">
            <summary>Constant that contains the name of the Schema where the table resists
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.TABLE_NAME">
            <summary>Constant that contains the table name for the FROM Statement
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.JOBID_FIELD_NAME">
            <summary>Constant that represents the field name corresponding to the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.JobId"/> property
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.REQUESTID_FIELD_NAME">
            <summary>Constant that represents the field name corresponding to the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.RequestId"/> property
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.SINKID_FIELD_NAME">
            <summary>Constant that represents the field name corresponding to the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.SinkId"/> property
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.STATUSID_FIELD_NAME">
            <summary>Constant that represents the field name corresponding to the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.StatusId"/> property
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.FILEPATH_FIELD_NAME">
            <summary>Constant that represents the field name corresponding to the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.FilePath"/> property
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.FILENAME_FIELD_NAME">
            <summary>Constant that represents the field name corresponding to the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.FileName"/> property
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.EXPECTEDFILESIZEBYTES_FIELD_NAME">
            <summary>Constant that represents the field name corresponding to the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.ExpectedFileSizeBytes"/> property
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.LASTSTATUSUPDATE_FIELD_NAME">
            <summary>Constant that represents the field name corresponding to the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.LastStatusUpdate"/> property
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.ATTEMPTRETRYNR_FIELD_NAME">
            <summary>Constant that represents the field name corresponding to the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.AttemptRetryNr"/> property
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.NOT_CREATED_ON_DATABASE_ID">
            <summary>Id of a object that has not been created on the database. If first time saved
              the object will become a different id
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.GetFromWithAlias(System.String)">
            <summary>Gets the from clause with a defined alias. If just a common alias is used there is a constant
              to get a default aliased list of fields <see cref="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.FIELD_NAMES_WITH_ALIAS"/>
            </summary>
            <param name="aAlias">Alias to be used</param>
            <returns>List of field names with the alias</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.#ctor(Sensirion.Data.DB.IExecuteQuery)">
            <summary>Creates a new instance 
            </summary>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.#ctor(System.Int32,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Creates a new instance and reads the data row with the submitted <paramref name="aId"/> into the instance 
            </summary>
            <param name="aId">Id of the data row (primary key)</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <exception cref="T:System.Data.DataException">Thrown if a element with the given id does not exists on the database</exception>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.#ctor(System.Data.SqlClient.SqlDataReader)">
            <summary>Reads the element from a reader submitted by the caller. The method 
               executes the <paramref name="aReader"/>.Read() Method to get the data row.
            </summary>
            <param name="aReader">Reader with data in it</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.LoadSingleRowFromReader(System.Data.SqlClient.SqlDataReader)">
            <summary>Loads a single row from a reader into the current item 
            </summary>
            <param name="aReader">Opened reader containing a row with the item data</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.LoadFromReader(System.Data.SqlClient.SqlDataReader,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Returns a list of <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job"/> objects that has been read from the submitted reader 
            </summary>
            <param name="aReader">Well configured reader with data rows in it</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>A list of <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job"/> objects</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.LoadCustomized(System.String,System.String,Sensirion.Data.DB.IExecuteQuery,Sensirion.Data.DB.SQLHelper.ParameterType[])">
            <summary>Returns a list of items. The caller can submit a customized from and where clause to select a specific set of items
            </summary>
            <param name="aCustomWhere">WHERE clause (can be submitted with or without the word 'WHERE')</param>
            <param name="aAdditionalFrom">Additional tables or joins to match the WHERE clause</param>
            <param name="aParameters"><see cref="T:System.Array"/> of parameters to customize the query if needed</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>A list containing all selected items</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.LoadCustomized(System.String,System.String,System.Int32,Sensirion.Data.DB.IExecuteQuery,Sensirion.Data.DB.SQLHelper.ParameterType[])">
            <summary>Returns a list of items. The caller can submit a customized from and where clause to select a specific set of items
            </summary>
            <param name="aCustomWhere">WHERE clause (can be submitted with or without the word 'WHERE')</param>
            <param name="aAdditionalFrom">Additional tables or joins to match the WHERE clause. The additional piece
              will be attached after the table name. So the first sign must be a semicolon
             </param>
            <param name="aParameters"><see cref="T:System.Array"/> of parameters to customize the query if needed</param>
            <param name="aCount">Count of max data rows to get (TOP Statement). If count is 0 or less no TOP Statement will be used</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>A list containing all selected items</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.LoadCustomized(System.String,System.String,System.Int32,Sensirion.Data.DB.IExecuteQuery,System.Boolean,Sensirion.Data.DB.SQLHelper.ParameterType[])">
            <summary>Returns a list of items. The caller can submit a customized from and where clause to select a specific set of items
            </summary>
            <param name="aCustomWhere">WHERE clause (can be submitted with or without the word 'WHERE')</param>
            <param name="aAdditionalFrom">Additional tables or joins to match the WHERE clause. The additional piece
              will be attached after the table name. So the first sign must be a semicolon
             </param>
            <param name="aParameters"><see cref="T:System.Array"/> of parameters to customize the query if needed</param>
            <param name="aCount">Count of max data rows to get (TOP Statement). If count is 0 or less no TOP Statement will be used</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <param name="aUseDistinct">If <see langword="true"/> the query will use the <c>SELECT DISTINCT</c> syntax</param>
            <returns>A list containing all selected items</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.LoadFromLastStatusUpdate(System.DateTime,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Loads a list of <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job"/> from a given <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.LastStatusUpdate"/> 
            </summary>
            <param name="aLastStatusUpdate">Key to load for</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>List of <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job"/> or an empty list if no <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job"/> exists with the given <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.LastStatusUpdate"/></returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.LoadSingleFromLastStatusUpdate(System.DateTime,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Loads the first found <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job"/> from a given <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.LastStatusUpdate"/> 
            </summary>
            <param name="aLastStatusUpdate">Key to load for</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>A <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job"/> or <see langword="null"/> if no <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job"/> exists with the given <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.LastStatusUpdate"/></returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.LoadFromRequestId(System.Int32,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Loads a list of <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job"/> from a given <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.RequestId"/> 
            </summary>
            <param name="aRequestId">Key to load for</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>List of <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job"/> or an empty list if no <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job"/> exists with the given <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.RequestId"/></returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.LoadSingleFromRequestId(System.Int32,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Loads the first found <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job"/> from a given <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.RequestId"/> 
            </summary>
            <param name="aRequestId">Key to load for</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>A <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job"/> or <see langword="null"/> if no <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job"/> exists with the given <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.RequestId"/></returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.LoadFromSinkId(System.Int32,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Loads a list of <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job"/> from a given <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.SinkId"/> 
            </summary>
            <param name="aSinkId">Key to load for</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>List of <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job"/> or an empty list if no <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job"/> exists with the given <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.SinkId"/></returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.LoadSingleFromSinkId(System.Int32,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Loads the first found <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job"/> from a given <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.SinkId"/> 
            </summary>
            <param name="aSinkId">Key to load for</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>A <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job"/> or <see langword="null"/> if no <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job"/> exists with the given <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.SinkId"/></returns>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.IsNew">
            <summary>Indicates whether the object is new or exists already on the database
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.Delete">
            <summary>Deletes the element from the database
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.Delete(System.Int32,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Deletes a element from the database 
            </summary>
            <param name="aId">Primary key of the object to delete</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.Update">
            <summary>Updates the element on the database with the new values 
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.Create">
            <summary>Creates a new <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job"/> in the Database and returns the identity column in the id property
            </summary>
            <exception cref="T:System.Data.MissingPrimaryKeyException">Thrown, if the identity could not read back</exception>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.NewJob(System.Int32,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Creates a new item with the given id 
            </summary>
            <param name="aId">ID that the item should have</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>new empty instance (only id is set)</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.GetJob(System.Int32,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Reads an element from the database
            </summary>
            <param name="aId">Primary key of the element to read</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>A <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job"/> object that represents the read element</returns>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job._JobId">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.JobId"/> Property.
            <para>Primary key
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.JobId"/> field in the table t_Job</para>
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.JobId">
            <summary>Primary key
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.JobId"/> field in the table t_Job
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job._RequestId">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.RequestId"/> Property.
            <para>Foreign key to a Request
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.RequestId"/> field in the table t_Job</para>
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.RequestId">
            <summary>Foreign key to a Request
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.RequestId"/> field in the table t_Job
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job._SinkId">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.SinkId"/> Property.
            <para>Foreign key to a Sink
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.SinkId"/> field in the table t_Job</para>
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.SinkId">
            <summary>Foreign key to a Sink
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.SinkId"/> field in the table t_Job
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job._StatusId">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.StatusId"/> Property.
            <para>Foreign key to a Status
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.StatusId"/> field in the table t_Job</para>
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.StatusId">
            <summary>Foreign key to a Status
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.StatusId"/> field in the table t_Job
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job._FilePath">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.FilePath"/> Property.
            <para>File absolute path
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.FilePath"/> field in the table t_Job</para>
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.FilePath">
            <summary>File absolute path
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.FilePath"/> field in the table t_Job
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job._FileName">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.FileName"/> Property.
            <para>File name
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.FileName"/> field in the table t_Job</para>
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.FileName">
            <summary>File name
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.FileName"/> field in the table t_Job
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job._ExpectedFileSizeBytes">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.ExpectedFileSizeBytes"/> Property.
            <para>Expected size of the file in bytes
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.ExpectedFileSizeBytes"/> field in the table t_Job</para>
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.ExpectedFileSizeBytes">
            <summary>Expected size of the file in bytes
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.ExpectedFileSizeBytes"/> field in the table t_Job
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job._LastStatusUpdate">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.LastStatusUpdate"/> Property.
            <para>Last status update time
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.LastStatusUpdate"/> field in the table t_Job</para>
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.LastStatusUpdate">
            <summary>Last status update time
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.LastStatusUpdate"/> field in the table t_Job
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job._AttemptRetryNr">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.AttemptRetryNr"/> Property.
            <para>Attempt retry number
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.AttemptRetryNr"/> field in the table t_Job</para>
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.AttemptRetryNr">
            <summary>Attempt retry number
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.AttemptRetryNr"/> field in the table t_Job
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.LoadAllDepending(System.Boolean)">
            <summary>Loads ALL Foreign Key related elements. This can be very time consuming
            </summary>
            <param name="aDeep"><see langword="true"/>, if depending elements of sub elements should be loaded too</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.LoadAllDepending(System.Int32)">
            <summary>Loads ALL Foreign Key related elements. This can be very time consuming
            </summary>
            <param name="aDepth">Limits the level to load all depending objects (-1 means all level)</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.Save(System.Int32)">
            <summary>Saves the Element to the db. If the element does not exists, a new data row will be
              inserted. Otherwise the existing row will be updated with the new values.
              <para>The element does not perform an update, if the modified flag is not <see langword="true"/>.
              </para>
            </summary>
            <param name="aDepth">Levels to be saved.
              <para>
                <list type="bullet">
                  <item>
                    <description>A Level of 0 means, that no dependent objects will be saved</description>
                  </item><item>
                    <description>Level of 1 means, all depending objects will be saved but not deep.</description>
                  </item><item>
                    <description>Level of two means, that all depending objects and all their depending objects will be saved.</description>
                  </item><item>
                    <description>Level of -1 means, that all depending objects will be saved deep (unlimited level).</description>
                  </item>
                </list>
              </para>
            </param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.UpdateDependentObjectsWithID(System.Int32)">
            <summary>Updates all depending objects with the ID of the current object 
            </summary>
            <param name="aDepth"><see langword="true"/>, if the depending elements will be updated too</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.ResetId(System.Int32)">
            <summary>Marks the object as new if it has not been loaded from database
              This can be useful, if a transaction has been rolled back and all the objects
              must be saved again. If some actions has been taken before and some objects got an Id
              they must be reseted to be new, because the received Id does not exists anymore
              on the database and a identity violation will occur if the object is saved again.
            </summary>
            <param name="aDepth">The level to which the reset will be done (-1 = all level)</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.WritePropertiesToStream(System.IO.MemoryStream)">
            <summary>Writes the binary representation of all db properties 
              to the passed <paramref name="aSerializeStream"/> for 
              the calculation of the hash. The calculation includes all
              NOT foreign key columns.
            </summary>
            <param name="aSerializeStream">Stream where the db properties 
              has to be serialized for hash calculation.
            </param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.GetDataAsArray">
            <summary>Get all data (without primary key and computed entries) as array.
            The order of the data in the array matches FIELD_NAMES_WITHOUT_PRIMARY_ARRAY.
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job.GetDataColumnTypes">
            <summary>Get all column names (without primary key and computed entries) with their non-nullable data type.
            The order of the data in the array matches the FIELD_NAMES_WITHOUT_PRIMARY_ARRAY.
            </summary>
        </member>
        <member name="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification">
            <summary>This object represents the properties and methods of a the table Notification.
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.Sink">
            <inheritdoc />
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.SelectSuccessNotificationFromGuid(System.Guid)">
            <summary>
            Retrieve the notification content and sink for the current request
            </summary>
            <param name="guid">The request identifier</param>
            <returns>True, if a notification is configured, or false otherwise</returns>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.FIELD_NAMES">
            <summary>Comma separated list with all fields that are contained in the class. This also contains identity and computed fields.
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.FIELD_NAMES_WITH_ALIAS">
            <summary>Comma separated list with all fields that are contained in the class with table name as alias.This also contains identity and computed fields.
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.DEFAULT_ALIAS">
            <summary>table name used as alias in the <see cref="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.FIELD_NAMES_WITH_ALIAS"/> const
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.FIELD_NAMES_WITHOUT_PRIMARY">
            <summary>Comma separated list with all fields (except the primary key and the computed columns) that are contained in the class 
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.FIELD_NAMES_ARRAY">
            <summary><see cref="T:System.Array"/> with all fields that are contained in the class 
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.FIELD_NAMES_WITHOUT_PRIMARY_ARRAY">
            <summary><see cref="T:System.Array"/> with all fields (except the primary key and the computed columns) that are contained in the class 
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.FROM_TABLE_FULL_NAME">
            <summary>Constant that contains the table name for the FROM Statement
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.FROM_TABLE_FULL_NAME_WITH_DEFAULT_ALIAS">
            <summary>Constant that contains the table name for the FROM Statement
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.SCHEMA_NAME">
            <summary>Constant that contains the name of the Schema where the table resists
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.TABLE_NAME">
            <summary>Constant that contains the table name for the FROM Statement
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.NOTIFICATIONID_FIELD_NAME">
            <summary>Constant that represents the field name corresponding to the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.NotificationId"/> property
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.CONTENT_FIELD_NAME">
            <summary>Constant that represents the field name corresponding to the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.Content"/> property
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.SINKID_FIELD_NAME">
            <summary>Constant that represents the field name corresponding to the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.SinkId"/> property
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.NOT_CREATED_ON_DATABASE_ID">
            <summary>Id of a object that has not been created on the database. If first time saved
              the object will become a different id
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.GetFromWithAlias(System.String)">
            <summary>Gets the from clause with a defined alias. If just a common alias is used there is a constant
              to get a default aliased list of fields <see cref="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.FIELD_NAMES_WITH_ALIAS"/>
            </summary>
            <param name="aAlias">Alias to be used</param>
            <returns>List of field names with the alias</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.#ctor(Sensirion.Data.DB.IExecuteQuery)">
            <summary>Creates a new instance 
            </summary>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.#ctor(System.Int32,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Creates a new instance and reads the data row with the submitted <paramref name="aId"/> into the instance 
            </summary>
            <param name="aId">Id of the data row (primary key)</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <exception cref="T:System.Data.DataException">Thrown if a element with the given id does not exists on the database</exception>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.#ctor(System.Data.SqlClient.SqlDataReader)">
            <summary>Reads the element from a reader submitted by the caller. The method 
               executes the <paramref name="aReader"/>.Read() Method to get the data row.
            </summary>
            <param name="aReader">Reader with data in it</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.LoadSingleRowFromReader(System.Data.SqlClient.SqlDataReader)">
            <summary>Loads a single row from a reader into the current item 
            </summary>
            <param name="aReader">Opened reader containing a row with the item data</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.LoadFromReader(System.Data.SqlClient.SqlDataReader,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Returns a list of <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification"/> objects that has been read from the submitted reader 
            </summary>
            <param name="aReader">Well configured reader with data rows in it</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>A list of <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification"/> objects</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.LoadCustomized(System.String,System.String,Sensirion.Data.DB.IExecuteQuery,Sensirion.Data.DB.SQLHelper.ParameterType[])">
            <summary>Returns a list of items. The caller can submit a customized from and where clause to select a specific set of items
            </summary>
            <param name="aCustomWhere">WHERE clause (can be submitted with or without the word 'WHERE')</param>
            <param name="aAdditionalFrom">Additional tables or joins to match the WHERE clause</param>
            <param name="aParameters"><see cref="T:System.Array"/> of parameters to customize the query if needed</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>A list containing all selected items</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.LoadCustomized(System.String,System.String,System.Int32,Sensirion.Data.DB.IExecuteQuery,Sensirion.Data.DB.SQLHelper.ParameterType[])">
            <summary>Returns a list of items. The caller can submit a customized from and where clause to select a specific set of items
            </summary>
            <param name="aCustomWhere">WHERE clause (can be submitted with or without the word 'WHERE')</param>
            <param name="aAdditionalFrom">Additional tables or joins to match the WHERE clause. The additional piece
              will be attached after the table name. So the first sign must be a semicolon
             </param>
            <param name="aParameters"><see cref="T:System.Array"/> of parameters to customize the query if needed</param>
            <param name="aCount">Count of max data rows to get (TOP Statement). If count is 0 or less no TOP Statement will be used</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>A list containing all selected items</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.LoadCustomized(System.String,System.String,System.Int32,Sensirion.Data.DB.IExecuteQuery,System.Boolean,Sensirion.Data.DB.SQLHelper.ParameterType[])">
            <summary>Returns a list of items. The caller can submit a customized from and where clause to select a specific set of items
            </summary>
            <param name="aCustomWhere">WHERE clause (can be submitted with or without the word 'WHERE')</param>
            <param name="aAdditionalFrom">Additional tables or joins to match the WHERE clause. The additional piece
              will be attached after the table name. So the first sign must be a semicolon
             </param>
            <param name="aParameters"><see cref="T:System.Array"/> of parameters to customize the query if needed</param>
            <param name="aCount">Count of max data rows to get (TOP Statement). If count is 0 or less no TOP Statement will be used</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <param name="aUseDistinct">If <see langword="true"/> the query will use the <c>SELECT DISTINCT</c> syntax</param>
            <returns>A list containing all selected items</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.LoadFromSinkId(System.Int32,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Loads a list of <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification"/> from a given <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.SinkId"/> 
            </summary>
            <param name="aSinkId">Key to load for</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>List of <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification"/> or an empty list if no <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification"/> exists with the given <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.SinkId"/></returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.LoadSingleFromSinkId(System.Int32,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Loads the first found <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification"/> from a given <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.SinkId"/> 
            </summary>
            <param name="aSinkId">Key to load for</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>A <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification"/> or <see langword="null"/> if no <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification"/> exists with the given <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.SinkId"/></returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.Delete">
            <summary>Deletes the element from the database
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.Delete(System.Int32,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Deletes a element from the database 
            </summary>
            <param name="aId">Primary key of the object to delete</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.Update">
            <summary>Updates the element on the database with the new values 
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.Create">
            <summary>Creates a new <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification"/> in the Database and returns the identity column in the id property
            </summary>
            <exception cref="T:System.Data.MissingPrimaryKeyException">Thrown, if the identity could not read back</exception>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.NewNotification(System.Int32,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Creates a new item with the given id 
            </summary>
            <param name="aId">ID that the item should have</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>new empty instance (only id is set)</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.GetNotification(System.Int32,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Reads an element from the database
            </summary>
            <param name="aId">Primary key of the element to read</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>A <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification"/> object that represents the read element</returns>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification._NotificationId">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.NotificationId"/> Property.
            <para>Primary key
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.NotificationId"/> field in the table t_Notification</para>
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.NotificationId">
            <summary>Primary key
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.NotificationId"/> field in the table t_Notification
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification._Content">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.Content"/> Property.
            <para>The text of the notification
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.Content"/> field in the table t_Notification</para>
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.Content">
            <summary>The text of the notification
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.Content"/> field in the table t_Notification
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification._SinkId">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.SinkId"/> Property.
            <para>Sink where to send the notification
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.SinkId"/> field in the table t_Notification</para>
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.SinkId">
            <summary>Sink where to send the notification
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.SinkId"/> field in the table t_Notification
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.LoadAllDepending(System.Boolean)">
            <summary>Loads ALL Foreign Key related elements. This can be very time consuming
            </summary>
            <param name="aDeep"><see langword="true"/>, if depending elements of sub elements should be loaded too</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.LoadAllDepending(System.Int32)">
            <summary>Loads ALL Foreign Key related elements. This can be very time consuming
            </summary>
            <param name="aDepth">Limits the level to load all depending objects (-1 means all level)</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.Save(System.Int32)">
            <summary>Saves the Element to the db. If the element does not exists, a new data row will be
              inserted. Otherwise the existing row will be updated with the new values.
              <para>The element does not perform an update, if the modified flag is not <see langword="true"/>.
              </para>
            </summary>
            <param name="aDepth">Levels to be saved.
              <para>
                <list type="bullet">
                  <item>
                    <description>A Level of 0 means, that no dependent objects will be saved</description>
                  </item><item>
                    <description>Level of 1 means, all depending objects will be saved but not deep.</description>
                  </item><item>
                    <description>Level of two means, that all depending objects and all their depending objects will be saved.</description>
                  </item><item>
                    <description>Level of -1 means, that all depending objects will be saved deep (unlimited level).</description>
                  </item>
                </list>
              </para>
            </param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.UpdateDependentObjectsWithID(System.Int32)">
            <summary>Updates all depending objects with the ID of the current object 
            </summary>
            <param name="aDepth"><see langword="true"/>, if the depending elements will be updated too</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.ResetId(System.Int32)">
            <summary>Marks the object as new if it has not been loaded from database
              This can be useful, if a transaction has been rolled back and all the objects
              must be saved again. If some actions has been taken before and some objects got an Id
              they must be reseted to be new, because the received Id does not exists anymore
              on the database and a identity violation will occur if the object is saved again.
            </summary>
            <param name="aDepth">The level to which the reset will be done (-1 = all level)</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.WritePropertiesToStream(System.IO.MemoryStream)">
            <summary>Writes the binary representation of all db properties 
              to the passed <paramref name="aSerializeStream"/> for 
              the calculation of the hash. The calculation includes all
              NOT foreign key columns.
            </summary>
            <param name="aSerializeStream">Stream where the db properties 
              has to be serialized for hash calculation.
            </param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.GetDataAsArray">
            <summary>Get all data (without primary key and computed entries) as array.
            The order of the data in the array matches FIELD_NAMES_WITHOUT_PRIMARY_ARRAY.
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification.GetDataColumnTypes">
            <summary>Get all column names (without primary key and computed entries) with their non-nullable data type.
            The order of the data in the array matches the FIELD_NAMES_WITHOUT_PRIMARY_ARRAY.
            </summary>
        </member>
        <member name="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request">
            <summary>This object represents the properties and methods of a the table Request.
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.SelectByGuid(System.Guid)">
            <summary>
            Find a request Id given a <see cref="T:System.Guid"/> and save it to <c>this</c>.
            </summary>
            <param name="guid">The guid</param>
            <returns>The request Id, or <c>null</c> if the guid was not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.SelectOnePendingRequest">
            <summary>
            Find one pending request and save it to <c>this</c>.
            </summary>
            <returns>True if a pending request was found, false otherwise</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.SelectOneRequestAwaitingDeletion(System.DateTime)">
            <summary>
            Find one completed request that is awaiting deletion and save it to <c>this</c>.
            </summary>
            <param name="thresholdTime">Filter by DeletableOn before this time</param>
            <returns>True if a request awaiting deletion was found, false otherwise</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.SelectJobs">
            <summary> Get all the jobs for this request identified by <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.RequestId"/>
            </summary>
            <returns>The list of jobs</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.UpdateStatus(System.DateTime,Sensirion.Hummer.Interfaces.DataObject.RequestStatus)">
            <summary> Update the status of any request matching <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.Guid"/>.
            </summary>
            <param name="currentTime">The current time</param>
            <param name="status">The status to set</param>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.FIELD_NAMES">
            <summary>Comma separated list with all fields that are contained in the class. This also contains identity and computed fields.
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.FIELD_NAMES_WITH_ALIAS">
            <summary>Comma separated list with all fields that are contained in the class with table name as alias.This also contains identity and computed fields.
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.DEFAULT_ALIAS">
            <summary>table name used as alias in the <see cref="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.FIELD_NAMES_WITH_ALIAS"/> const
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.FIELD_NAMES_WITHOUT_PRIMARY">
            <summary>Comma separated list with all fields (except the primary key and the computed columns) that are contained in the class 
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.FIELD_NAMES_ARRAY">
            <summary><see cref="T:System.Array"/> with all fields that are contained in the class 
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.FIELD_NAMES_WITHOUT_PRIMARY_ARRAY">
            <summary><see cref="T:System.Array"/> with all fields (except the primary key and the computed columns) that are contained in the class 
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.FROM_TABLE_FULL_NAME">
            <summary>Constant that contains the table name for the FROM Statement
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.FROM_TABLE_FULL_NAME_WITH_DEFAULT_ALIAS">
            <summary>Constant that contains the table name for the FROM Statement
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.SCHEMA_NAME">
            <summary>Constant that contains the name of the Schema where the table resists
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.TABLE_NAME">
            <summary>Constant that contains the table name for the FROM Statement
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.REQUESTID_FIELD_NAME">
            <summary>Constant that represents the field name corresponding to the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.RequestId"/> property
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.SOURCEAPPLICATIONID_FIELD_NAME">
            <summary>Constant that represents the field name corresponding to the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.SourceApplicationId"/> property
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.GUID_FIELD_NAME">
            <summary>Constant that represents the field name corresponding to the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.Guid"/> property
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.CREATEDATE_FIELD_NAME">
            <summary>Constant that represents the field name corresponding to the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.CreateDate"/> property
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.STATUSID_FIELD_NAME">
            <summary>Constant that represents the field name corresponding to the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.StatusId"/> property
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.LASTSTATUSUPDATE_FIELD_NAME">
            <summary>Constant that represents the field name corresponding to the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.LastStatusUpdate"/> property
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.DELETABLEON_FIELD_NAME">
            <summary>Constant that represents the field name corresponding to the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.DeletableOn"/> property
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.NOTIFYONUPLOADOKID_FIELD_NAME">
            <summary>Constant that represents the field name corresponding to the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.NotifyOnUploadOkId"/> property
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.NOT_CREATED_ON_DATABASE_ID">
            <summary>Id of a object that has not been created on the database. If first time saved
              the object will become a different id
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.GetFromWithAlias(System.String)">
            <summary>Gets the from clause with a defined alias. If just a common alias is used there is a constant
              to get a default aliased list of fields <see cref="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.FIELD_NAMES_WITH_ALIAS"/>
            </summary>
            <param name="aAlias">Alias to be used</param>
            <returns>List of field names with the alias</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.#ctor(Sensirion.Data.DB.IExecuteQuery)">
            <summary>Creates a new instance 
            </summary>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.#ctor(System.Int32,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Creates a new instance and reads the data row with the submitted <paramref name="aId"/> into the instance 
            </summary>
            <param name="aId">Id of the data row (primary key)</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <exception cref="T:System.Data.DataException">Thrown if a element with the given id does not exists on the database</exception>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.#ctor(System.Data.SqlClient.SqlDataReader)">
            <summary>Reads the element from a reader submitted by the caller. The method 
               executes the <paramref name="aReader"/>.Read() Method to get the data row.
            </summary>
            <param name="aReader">Reader with data in it</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.LoadSingleRowFromReader(System.Data.SqlClient.SqlDataReader)">
            <summary>Loads a single row from a reader into the current item 
            </summary>
            <param name="aReader">Opened reader containing a row with the item data</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.LoadFromReader(System.Data.SqlClient.SqlDataReader,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Returns a list of <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> objects that has been read from the submitted reader 
            </summary>
            <param name="aReader">Well configured reader with data rows in it</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>A list of <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> objects</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.LoadCustomized(System.String,System.String,Sensirion.Data.DB.IExecuteQuery,Sensirion.Data.DB.SQLHelper.ParameterType[])">
            <summary>Returns a list of items. The caller can submit a customized from and where clause to select a specific set of items
            </summary>
            <param name="aCustomWhere">WHERE clause (can be submitted with or without the word 'WHERE')</param>
            <param name="aAdditionalFrom">Additional tables or joins to match the WHERE clause</param>
            <param name="aParameters"><see cref="T:System.Array"/> of parameters to customize the query if needed</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>A list containing all selected items</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.LoadCustomized(System.String,System.String,System.Int32,Sensirion.Data.DB.IExecuteQuery,Sensirion.Data.DB.SQLHelper.ParameterType[])">
            <summary>Returns a list of items. The caller can submit a customized from and where clause to select a specific set of items
            </summary>
            <param name="aCustomWhere">WHERE clause (can be submitted with or without the word 'WHERE')</param>
            <param name="aAdditionalFrom">Additional tables or joins to match the WHERE clause. The additional piece
              will be attached after the table name. So the first sign must be a semicolon
             </param>
            <param name="aParameters"><see cref="T:System.Array"/> of parameters to customize the query if needed</param>
            <param name="aCount">Count of max data rows to get (TOP Statement). If count is 0 or less no TOP Statement will be used</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>A list containing all selected items</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.LoadCustomized(System.String,System.String,System.Int32,Sensirion.Data.DB.IExecuteQuery,System.Boolean,Sensirion.Data.DB.SQLHelper.ParameterType[])">
            <summary>Returns a list of items. The caller can submit a customized from and where clause to select a specific set of items
            </summary>
            <param name="aCustomWhere">WHERE clause (can be submitted with or without the word 'WHERE')</param>
            <param name="aAdditionalFrom">Additional tables or joins to match the WHERE clause. The additional piece
              will be attached after the table name. So the first sign must be a semicolon
             </param>
            <param name="aParameters"><see cref="T:System.Array"/> of parameters to customize the query if needed</param>
            <param name="aCount">Count of max data rows to get (TOP Statement). If count is 0 or less no TOP Statement will be used</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <param name="aUseDistinct">If <see langword="true"/> the query will use the <c>SELECT DISTINCT</c> syntax</param>
            <returns>A list containing all selected items</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.LoadFromDeletableOn(System.Nullable{System.DateTime},Sensirion.Data.DB.IExecuteQuery)">
            <summary>Loads a list of <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> from a given <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.DeletableOn"/> 
            </summary>
            <param name="aDeletableOn">Key to load for</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>List of <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> or an empty list if no <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> exists with the given <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.DeletableOn"/></returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.LoadSingleFromDeletableOn(System.Nullable{System.DateTime},Sensirion.Data.DB.IExecuteQuery)">
            <summary>Loads the first found <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> from a given <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.DeletableOn"/> 
            </summary>
            <param name="aDeletableOn">Key to load for</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>A <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> or <see langword="null"/> if no <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> exists with the given <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.DeletableOn"/></returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.LoadFromLastStatusUpdate(System.DateTime,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Loads a list of <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> from a given <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.LastStatusUpdate"/> 
            </summary>
            <param name="aLastStatusUpdate">Key to load for</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>List of <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> or an empty list if no <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> exists with the given <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.LastStatusUpdate"/></returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.LoadSingleFromLastStatusUpdate(System.DateTime,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Loads the first found <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> from a given <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.LastStatusUpdate"/> 
            </summary>
            <param name="aLastStatusUpdate">Key to load for</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>A <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> or <see langword="null"/> if no <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> exists with the given <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.LastStatusUpdate"/></returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.LoadFromNotifyOnUploadOkId(System.Nullable{System.Int32},Sensirion.Data.DB.IExecuteQuery)">
            <summary>Loads a list of <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> from a given <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.NotifyOnUploadOkId"/> 
            </summary>
            <param name="aNotifyOnUploadOkId">Key to load for</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>List of <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> or an empty list if no <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> exists with the given <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.NotifyOnUploadOkId"/></returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.LoadSingleFromNotifyOnUploadOkId(System.Nullable{System.Int32},Sensirion.Data.DB.IExecuteQuery)">
            <summary>Loads the first found <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> from a given <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.NotifyOnUploadOkId"/> 
            </summary>
            <param name="aNotifyOnUploadOkId">Key to load for</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>A <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> or <see langword="null"/> if no <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> exists with the given <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.NotifyOnUploadOkId"/></returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.LoadFromSourceApplicationId(System.Int32,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Loads a list of <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> from a given <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.SourceApplicationId"/> 
            </summary>
            <param name="aSourceApplicationId">Key to load for</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>List of <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> or an empty list if no <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> exists with the given <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.SourceApplicationId"/></returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.LoadSingleFromSourceApplicationId(System.Int32,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Loads the first found <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> from a given <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.SourceApplicationId"/> 
            </summary>
            <param name="aSourceApplicationId">Key to load for</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>A <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> or <see langword="null"/> if no <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> exists with the given <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.SourceApplicationId"/></returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.LoadFromGuid(System.Guid,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Loads a list of <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> from a given <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.Guid"/> 
            </summary>
            <param name="aGuid">Key to load for</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>List of <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> or an empty list if no <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> exists with the given <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.Guid"/></returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.LoadSingleFromGuid(System.Guid,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Loads the first found <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> from a given <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.Guid"/> 
            </summary>
            <param name="aGuid">Key to load for</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>A <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> or <see langword="null"/> if no <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> exists with the given <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.Guid"/></returns>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.IsNew">
            <summary>Indicates whether the object is new or exists already on the database
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.Delete">
            <summary>Deletes the element from the database
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.Delete(System.Int32,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Deletes a element from the database 
            </summary>
            <param name="aId">Primary key of the object to delete</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.Update">
            <summary>Updates the element on the database with the new values 
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.Create">
            <summary>Creates a new <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> in the Database and returns the identity column in the id property
            </summary>
            <exception cref="T:System.Data.MissingPrimaryKeyException">Thrown, if the identity could not read back</exception>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.NewRequest(System.Int32,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Creates a new item with the given id 
            </summary>
            <param name="aId">ID that the item should have</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>new empty instance (only id is set)</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.GetRequest(System.Int32,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Reads an element from the database
            </summary>
            <param name="aId">Primary key of the element to read</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>A <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> object that represents the read element</returns>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request._RequestId">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.RequestId"/> Property.
            <para>Primary key
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.RequestId"/> field in the table t_Request</para>
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.RequestId">
            <summary>Primary key
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.RequestId"/> field in the table t_Request
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request._SourceApplicationId">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.SourceApplicationId"/> Property.
            <para>Foreign key to a SourceApplication
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.SourceApplicationId"/> field in the table t_Request</para>
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.SourceApplicationId">
            <summary>Foreign key to a SourceApplication
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.SourceApplicationId"/> field in the table t_Request
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request._Guid">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.Guid"/> Property.
            <para>Guid
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.Guid"/> field in the table t_Request</para>
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.Guid">
            <summary>Guid
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.Guid"/> field in the table t_Request
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request._CreateDate">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.CreateDate"/> Property.
            <para>Create date
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.CreateDate"/> field in the table t_Request</para>
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.CreateDate">
            <summary>Create date
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.CreateDate"/> field in the table t_Request
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request._StatusId">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.StatusId"/> Property.
            <para>Foreign key to a Status
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.StatusId"/> field in the table t_Request</para>
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.StatusId">
            <summary>Foreign key to a Status
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.StatusId"/> field in the table t_Request
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request._LastStatusUpdate">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.LastStatusUpdate"/> Property.
            <para>Last status update time
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.LastStatusUpdate"/> field in the table t_Request</para>
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.LastStatusUpdate">
            <summary>Last status update time
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.LastStatusUpdate"/> field in the table t_Request
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request._DeletableOn">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.DeletableOn"/> Property.
            <para>Time when the request files are deletable
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.DeletableOn"/> field in the table t_Request</para>
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.DeletableOn">
            <summary>Time when the request files are deletable
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.DeletableOn"/> field in the table t_Request
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request._NotifyOnUploadOkId">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.NotifyOnUploadOkId"/> Property.
            <para>Foreign key to a Notification linked to successful upload
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.NotifyOnUploadOkId"/> field in the table t_Request</para>
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.NotifyOnUploadOkId">
            <summary>Foreign key to a Notification linked to successful upload
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.NotifyOnUploadOkId"/> field in the table t_Request
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request._JobsWorkInProgress">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.JobsWorkInProgress"/> Property.
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.JobsWorkInProgress">
            <summary>Represents the items subordinated to the t_Request table
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.LoadAllWorkInProgressJob(System.Boolean)">
            <summary>Loads all the <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job"/> from the t_Request
            </summary>
            <param name="aDeep">True, if the depending elements will be loaded too</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.LoadAllWorkInProgressJob(System.Int32)">
            <summary>Loads all the <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job"/> from the t_Request
            </summary>
            <param name="aDepth">Limits the level to load all depending objects (-1 means all, 0 means no objects).
              To load only the first level call it with 1.</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.AddNewWorkInProgressJob(Sensirion.Data.DB.IExecuteQuery)">
            <summary>Adds a new <c>WorkInProgress.Job</c> to the <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/>
            </summary>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.LoadAllDepending(System.Boolean)">
            <summary>Loads ALL Foreign Key related elements. This can be very time consuming
            </summary>
            <param name="aDeep"><see langword="true"/>, if depending elements of sub elements should be loaded too</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.LoadAllDepending(System.Int32)">
            <summary>Loads ALL Foreign Key related elements. This can be very time consuming
            </summary>
            <param name="aDepth">Limits the level to load all depending objects (-1 means all level)</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.Save(System.Int32)">
            <summary>Saves the Element to the db. If the element does not exists, a new data row will be
              inserted. Otherwise the existing row will be updated with the new values.
              <para>The element does not perform an update, if the modified flag is not <see langword="true"/>.
              </para>
            </summary>
            <param name="aDepth">Levels to be saved.
              <para>
                <list type="bullet">
                  <item>
                    <description>A Level of 0 means, that no dependent objects will be saved</description>
                  </item><item>
                    <description>Level of 1 means, all depending objects will be saved but not deep.</description>
                  </item><item>
                    <description>Level of two means, that all depending objects and all their depending objects will be saved.</description>
                  </item><item>
                    <description>Level of -1 means, that all depending objects will be saved deep (unlimited level).</description>
                  </item>
                </list>
              </para>
            </param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.UpdateDependentObjectsWithID(System.Int32)">
            <summary>Updates all depending objects with the ID of the current object 
            </summary>
            <param name="aDepth"><see langword="true"/>, if the depending elements will be updated too</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.ResetId(System.Int32)">
            <summary>Marks the object as new if it has not been loaded from database
              This can be useful, if a transaction has been rolled back and all the objects
              must be saved again. If some actions has been taken before and some objects got an Id
              they must be reseted to be new, because the received Id does not exists anymore
              on the database and a identity violation will occur if the object is saved again.
            </summary>
            <param name="aDepth">The level to which the reset will be done (-1 = all level)</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.WritePropertiesToStream(System.IO.MemoryStream)">
            <summary>Writes the binary representation of all db properties 
              to the passed <paramref name="aSerializeStream"/> for 
              the calculation of the hash. The calculation includes all
              NOT foreign key columns.
            </summary>
            <param name="aSerializeStream">Stream where the db properties 
              has to be serialized for hash calculation.
            </param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.GetDataAsArray">
            <summary>Get all data (without primary key and computed entries) as array.
            The order of the data in the array matches FIELD_NAMES_WITHOUT_PRIMARY_ARRAY.
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request.GetDataColumnTypes">
            <summary>Get all column names (without primary key and computed entries) with their non-nullable data type.
            The order of the data in the array matches the FIELD_NAMES_WITHOUT_PRIMARY_ARRAY.
            </summary>
        </member>
        <member name="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink">
            <summary>This object represents the properties and methods of a the table Sink.
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.CheckIfExistsInTable">
            <summary>
            Scan the current table for sinks matching all the non-id columns of <c>this</c>.
            </summary>
            <returns>The sink id, or null if it was not found</returns>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.FIELD_NAMES">
            <summary>Comma separated list with all fields that are contained in the class. This also contains identity and computed fields.
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.FIELD_NAMES_WITH_ALIAS">
            <summary>Comma separated list with all fields that are contained in the class with table name as alias.This also contains identity and computed fields.
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.DEFAULT_ALIAS">
            <summary>table name used as alias in the <see cref="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.FIELD_NAMES_WITH_ALIAS"/> const
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.FIELD_NAMES_WITHOUT_PRIMARY">
            <summary>Comma separated list with all fields (except the primary key and the computed columns) that are contained in the class 
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.FIELD_NAMES_ARRAY">
            <summary><see cref="T:System.Array"/> with all fields that are contained in the class 
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.FIELD_NAMES_WITHOUT_PRIMARY_ARRAY">
            <summary><see cref="T:System.Array"/> with all fields (except the primary key and the computed columns) that are contained in the class 
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.FROM_TABLE_FULL_NAME">
            <summary>Constant that contains the table name for the FROM Statement
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.FROM_TABLE_FULL_NAME_WITH_DEFAULT_ALIAS">
            <summary>Constant that contains the table name for the FROM Statement
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.SCHEMA_NAME">
            <summary>Constant that contains the name of the Schema where the table resists
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.TABLE_NAME">
            <summary>Constant that contains the table name for the FROM Statement
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.SINKID_FIELD_NAME">
            <summary>Constant that represents the field name corresponding to the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.SinkId"/> property
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.HOSTCATEGORY_FIELD_NAME">
            <summary>Constant that represents the field name corresponding to the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.HostCategory"/> property
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.BASEURL_FIELD_NAME">
            <summary>Constant that represents the field name corresponding to the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.BaseUrl"/> property
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.NAME_FIELD_NAME">
            <summary>Constant that represents the field name corresponding to the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.Name"/> property
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.USERNAME_FIELD_NAME">
            <summary>Constant that represents the field name corresponding to the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.Username"/> property
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.PASSWORD_FIELD_NAME">
            <summary>Constant that represents the field name corresponding to the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.Password"/> property
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.NOT_CREATED_ON_DATABASE_ID">
            <summary>Id of a object that has not been created on the database. If first time saved
              the object will become a different id
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.GetFromWithAlias(System.String)">
            <summary>Gets the from clause with a defined alias. If just a common alias is used there is a constant
              to get a default aliased list of fields <see cref="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.FIELD_NAMES_WITH_ALIAS"/>
            </summary>
            <param name="aAlias">Alias to be used</param>
            <returns>List of field names with the alias</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.#ctor(Sensirion.Data.DB.IExecuteQuery)">
            <summary>Creates a new instance 
            </summary>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.#ctor(System.Int32,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Creates a new instance and reads the data row with the submitted <paramref name="aId"/> into the instance 
            </summary>
            <param name="aId">Id of the data row (primary key)</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <exception cref="T:System.Data.DataException">Thrown if a element with the given id does not exists on the database</exception>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.#ctor(System.Data.SqlClient.SqlDataReader)">
            <summary>Reads the element from a reader submitted by the caller. The method 
               executes the <paramref name="aReader"/>.Read() Method to get the data row.
            </summary>
            <param name="aReader">Reader with data in it</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.LoadSingleRowFromReader(System.Data.SqlClient.SqlDataReader)">
            <summary>Loads a single row from a reader into the current item 
            </summary>
            <param name="aReader">Opened reader containing a row with the item data</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.LoadFromReader(System.Data.SqlClient.SqlDataReader,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Returns a list of <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink"/> objects that has been read from the submitted reader 
            </summary>
            <param name="aReader">Well configured reader with data rows in it</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>A list of <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink"/> objects</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.LoadCustomized(System.String,System.String,Sensirion.Data.DB.IExecuteQuery,Sensirion.Data.DB.SQLHelper.ParameterType[])">
            <summary>Returns a list of items. The caller can submit a customized from and where clause to select a specific set of items
            </summary>
            <param name="aCustomWhere">WHERE clause (can be submitted with or without the word 'WHERE')</param>
            <param name="aAdditionalFrom">Additional tables or joins to match the WHERE clause</param>
            <param name="aParameters"><see cref="T:System.Array"/> of parameters to customize the query if needed</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>A list containing all selected items</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.LoadCustomized(System.String,System.String,System.Int32,Sensirion.Data.DB.IExecuteQuery,Sensirion.Data.DB.SQLHelper.ParameterType[])">
            <summary>Returns a list of items. The caller can submit a customized from and where clause to select a specific set of items
            </summary>
            <param name="aCustomWhere">WHERE clause (can be submitted with or without the word 'WHERE')</param>
            <param name="aAdditionalFrom">Additional tables or joins to match the WHERE clause. The additional piece
              will be attached after the table name. So the first sign must be a semicolon
             </param>
            <param name="aParameters"><see cref="T:System.Array"/> of parameters to customize the query if needed</param>
            <param name="aCount">Count of max data rows to get (TOP Statement). If count is 0 or less no TOP Statement will be used</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>A list containing all selected items</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.LoadCustomized(System.String,System.String,System.Int32,Sensirion.Data.DB.IExecuteQuery,System.Boolean,Sensirion.Data.DB.SQLHelper.ParameterType[])">
            <summary>Returns a list of items. The caller can submit a customized from and where clause to select a specific set of items
            </summary>
            <param name="aCustomWhere">WHERE clause (can be submitted with or without the word 'WHERE')</param>
            <param name="aAdditionalFrom">Additional tables or joins to match the WHERE clause. The additional piece
              will be attached after the table name. So the first sign must be a semicolon
             </param>
            <param name="aParameters"><see cref="T:System.Array"/> of parameters to customize the query if needed</param>
            <param name="aCount">Count of max data rows to get (TOP Statement). If count is 0 or less no TOP Statement will be used</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <param name="aUseDistinct">If <see langword="true"/> the query will use the <c>SELECT DISTINCT</c> syntax</param>
            <returns>A list containing all selected items</returns>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.IsNew">
            <summary>Indicates whether the object is new or exists already on the database
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.Delete">
            <summary>Deletes the element from the database
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.Delete(System.Int32,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Deletes a element from the database 
            </summary>
            <param name="aId">Primary key of the object to delete</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.Update">
            <summary>Updates the element on the database with the new values 
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.Create">
            <summary>Creates a new <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink"/> in the Database and returns the identity column in the id property
            </summary>
            <exception cref="T:System.Data.MissingPrimaryKeyException">Thrown, if the identity could not read back</exception>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.NewSink(System.Int32,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Creates a new item with the given id 
            </summary>
            <param name="aId">ID that the item should have</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>new empty instance (only id is set)</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.GetSink(System.Int32,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Reads an element from the database
            </summary>
            <param name="aId">Primary key of the element to read</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>A <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink"/> object that represents the read element</returns>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink._SinkId">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.SinkId"/> Property.
            <para>Primary key
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.SinkId"/> field in the table t_Sink</para>
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.SinkId">
            <summary>Primary key
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.SinkId"/> field in the table t_Sink
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink._HostCategory">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.HostCategory"/> Property.
            <para>The type of the host
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.HostCategory"/> field in the table t_Sink</para>
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.HostCategory">
            <summary>The type of the host
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.HostCategory"/> field in the table t_Sink
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink._BaseUrl">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.BaseUrl"/> Property.
            <para>Base Url
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.BaseUrl"/> field in the table t_Sink</para>
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.BaseUrl">
            <summary>Base Url
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.BaseUrl"/> field in the table t_Sink
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink._Name">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.Name"/> Property.
            <para>Name of the sink
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.Name"/> field in the table t_Sink</para>
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.Name">
            <summary>Name of the sink
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.Name"/> field in the table t_Sink
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink._Username">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.Username"/> Property.
            <para>Credential username
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.Username"/> field in the table t_Sink</para>
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.Username">
            <summary>Credential username
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.Username"/> field in the table t_Sink
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink._Password">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.Password"/> Property.
            <para>Credential password
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.Password"/> field in the table t_Sink</para>
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.Password">
            <summary>Credential password
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.Password"/> field in the table t_Sink
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink._JobsWorkInProgress">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.JobsWorkInProgress"/> Property.
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.JobsWorkInProgress">
            <summary>Represents the items subordinated to the t_Sink table
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.LoadAllWorkInProgressJob(System.Boolean)">
            <summary>Loads all the <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job"/> from the t_Sink
            </summary>
            <param name="aDeep">True, if the depending elements will be loaded too</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.LoadAllWorkInProgressJob(System.Int32)">
            <summary>Loads all the <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job"/> from the t_Sink
            </summary>
            <param name="aDepth">Limits the level to load all depending objects (-1 means all, 0 means no objects).
              To load only the first level call it with 1.</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.AddNewWorkInProgressJob(Sensirion.Data.DB.IExecuteQuery)">
            <summary>Adds a new <c>WorkInProgress.Job</c> to the <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink"/>
            </summary>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.LoadAllDepending(System.Boolean)">
            <summary>Loads ALL Foreign Key related elements. This can be very time consuming
            </summary>
            <param name="aDeep"><see langword="true"/>, if depending elements of sub elements should be loaded too</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.LoadAllDepending(System.Int32)">
            <summary>Loads ALL Foreign Key related elements. This can be very time consuming
            </summary>
            <param name="aDepth">Limits the level to load all depending objects (-1 means all level)</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.Save(System.Int32)">
            <summary>Saves the Element to the db. If the element does not exists, a new data row will be
              inserted. Otherwise the existing row will be updated with the new values.
              <para>The element does not perform an update, if the modified flag is not <see langword="true"/>.
              </para>
            </summary>
            <param name="aDepth">Levels to be saved.
              <para>
                <list type="bullet">
                  <item>
                    <description>A Level of 0 means, that no dependent objects will be saved</description>
                  </item><item>
                    <description>Level of 1 means, all depending objects will be saved but not deep.</description>
                  </item><item>
                    <description>Level of two means, that all depending objects and all their depending objects will be saved.</description>
                  </item><item>
                    <description>Level of -1 means, that all depending objects will be saved deep (unlimited level).</description>
                  </item>
                </list>
              </para>
            </param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.UpdateDependentObjectsWithID(System.Int32)">
            <summary>Updates all depending objects with the ID of the current object 
            </summary>
            <param name="aDepth"><see langword="true"/>, if the depending elements will be updated too</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.ResetId(System.Int32)">
            <summary>Marks the object as new if it has not been loaded from database
              This can be useful, if a transaction has been rolled back and all the objects
              must be saved again. If some actions has been taken before and some objects got an Id
              they must be reseted to be new, because the received Id does not exists anymore
              on the database and a identity violation will occur if the object is saved again.
            </summary>
            <param name="aDepth">The level to which the reset will be done (-1 = all level)</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.WritePropertiesToStream(System.IO.MemoryStream)">
            <summary>Writes the binary representation of all db properties 
              to the passed <paramref name="aSerializeStream"/> for 
              the calculation of the hash. The calculation includes all
              NOT foreign key columns.
            </summary>
            <param name="aSerializeStream">Stream where the db properties 
              has to be serialized for hash calculation.
            </param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.GetDataAsArray">
            <summary>Get all data (without primary key and computed entries) as array.
            The order of the data in the array matches FIELD_NAMES_WITHOUT_PRIMARY_ARRAY.
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink.GetDataColumnTypes">
            <summary>Get all column names (without primary key and computed entries) with their non-nullable data type.
            The order of the data in the array matches the FIELD_NAMES_WITHOUT_PRIMARY_ARRAY.
            </summary>
        </member>
        <member name="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.JobList">
            <summary>List of <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job"/> elements 
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.JobList.FindByJobId(System.Int32)">
            <summary>Finds the first <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job"/> from a given <paramref name="aJobId"/>
            </summary>
            <param name="aJobId">JobId to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.JobList.FindAllByJobId(System.Int32)">
            <summary>Finds all <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job"/> from a given <paramref name="aJobId"/>
            </summary>
            <param name="aJobId">JobId to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.JobList.FindByRequestId(System.Int32)">
            <summary>Finds the first <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job"/> from a given <paramref name="aRequestId"/>
            </summary>
            <param name="aRequestId">RequestId to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.JobList.FindAllByRequestId(System.Int32)">
            <summary>Finds all <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job"/> from a given <paramref name="aRequestId"/>
            </summary>
            <param name="aRequestId">RequestId to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.JobList.FindBySinkId(System.Int32)">
            <summary>Finds the first <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job"/> from a given <paramref name="aSinkId"/>
            </summary>
            <param name="aSinkId">SinkId to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.JobList.FindAllBySinkId(System.Int32)">
            <summary>Finds all <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job"/> from a given <paramref name="aSinkId"/>
            </summary>
            <param name="aSinkId">SinkId to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.JobList.FindByStatusId(System.Int16)">
            <summary>Finds the first <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job"/> from a given <paramref name="aStatusId"/>
            </summary>
            <param name="aStatusId">StatusId to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.JobList.FindAllByStatusId(System.Int16)">
            <summary>Finds all <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job"/> from a given <paramref name="aStatusId"/>
            </summary>
            <param name="aStatusId">StatusId to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.JobList.FindByFilePath(System.String)">
            <summary>Finds the first <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job"/> from a given <paramref name="aFilePath"/>
            </summary>
            <param name="aFilePath">FilePath to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.JobList.FindAllByFilePath(System.String)">
            <summary>Finds all <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job"/> from a given <paramref name="aFilePath"/>
            </summary>
            <param name="aFilePath">FilePath to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.JobList.FindByFileName(System.String)">
            <summary>Finds the first <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job"/> from a given <paramref name="aFileName"/>
            </summary>
            <param name="aFileName">FileName to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.JobList.FindAllByFileName(System.String)">
            <summary>Finds all <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job"/> from a given <paramref name="aFileName"/>
            </summary>
            <param name="aFileName">FileName to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.JobList.FindByExpectedFileSizeBytes(System.Int64)">
            <summary>Finds the first <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job"/> from a given <paramref name="aExpectedFileSizeBytes"/>
            </summary>
            <param name="aExpectedFileSizeBytes">ExpectedFileSizeBytes to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.JobList.FindAllByExpectedFileSizeBytes(System.Int64)">
            <summary>Finds all <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job"/> from a given <paramref name="aExpectedFileSizeBytes"/>
            </summary>
            <param name="aExpectedFileSizeBytes">ExpectedFileSizeBytes to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.JobList.FindByLastStatusUpdate(System.DateTime)">
            <summary>Finds the first <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job"/> from a given <paramref name="aLastStatusUpdate"/>
            </summary>
            <param name="aLastStatusUpdate">LastStatusUpdate to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.JobList.FindAllByLastStatusUpdate(System.DateTime)">
            <summary>Finds all <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job"/> from a given <paramref name="aLastStatusUpdate"/>
            </summary>
            <param name="aLastStatusUpdate">LastStatusUpdate to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.JobList.FindByAttemptRetryNr(System.Int16)">
            <summary>Finds the first <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job"/> from a given <paramref name="aAttemptRetryNr"/>
            </summary>
            <param name="aAttemptRetryNr">AttemptRetryNr to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.JobList.FindAllByAttemptRetryNr(System.Int16)">
            <summary>Finds all <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job"/> from a given <paramref name="aAttemptRetryNr"/>
            </summary>
            <param name="aAttemptRetryNr">AttemptRetryNr to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.NotificationList">
            <summary>List of <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification"/> elements 
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.NotificationList.FindByNotificationId(System.Int32)">
            <summary>Finds the first <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification"/> from a given <paramref name="aNotificationId"/>
            </summary>
            <param name="aNotificationId">NotificationId to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.NotificationList.FindAllByNotificationId(System.Int32)">
            <summary>Finds all <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification"/> from a given <paramref name="aNotificationId"/>
            </summary>
            <param name="aNotificationId">NotificationId to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.NotificationList.FindByContent(System.String)">
            <summary>Finds the first <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification"/> from a given <paramref name="aContent"/>
            </summary>
            <param name="aContent">Content to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.NotificationList.FindAllByContent(System.String)">
            <summary>Finds all <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification"/> from a given <paramref name="aContent"/>
            </summary>
            <param name="aContent">Content to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.NotificationList.FindBySinkId(System.Int32)">
            <summary>Finds the first <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification"/> from a given <paramref name="aSinkId"/>
            </summary>
            <param name="aSinkId">SinkId to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.NotificationList.FindAllBySinkId(System.Int32)">
            <summary>Finds all <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Notification"/> from a given <paramref name="aSinkId"/>
            </summary>
            <param name="aSinkId">SinkId to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.RequestList">
            <summary>List of <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> elements 
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.RequestList.FindByRequestId(System.Int32)">
            <summary>Finds the first <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> from a given <paramref name="aRequestId"/>
            </summary>
            <param name="aRequestId">RequestId to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.RequestList.FindAllByRequestId(System.Int32)">
            <summary>Finds all <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> from a given <paramref name="aRequestId"/>
            </summary>
            <param name="aRequestId">RequestId to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.RequestList.FindBySourceApplicationId(System.Int32)">
            <summary>Finds the first <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> from a given <paramref name="aSourceApplicationId"/>
            </summary>
            <param name="aSourceApplicationId">SourceApplicationId to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.RequestList.FindAllBySourceApplicationId(System.Int32)">
            <summary>Finds all <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> from a given <paramref name="aSourceApplicationId"/>
            </summary>
            <param name="aSourceApplicationId">SourceApplicationId to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.RequestList.FindByGuid(System.Guid)">
            <summary>Finds the first <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> from a given <paramref name="aGuid"/>
            </summary>
            <param name="aGuid">Guid to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.RequestList.FindAllByGuid(System.Guid)">
            <summary>Finds all <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> from a given <paramref name="aGuid"/>
            </summary>
            <param name="aGuid">Guid to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.RequestList.FindByCreateDate(System.DateTime)">
            <summary>Finds the first <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> from a given <paramref name="aCreateDate"/>
            </summary>
            <param name="aCreateDate">CreateDate to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.RequestList.FindAllByCreateDate(System.DateTime)">
            <summary>Finds all <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> from a given <paramref name="aCreateDate"/>
            </summary>
            <param name="aCreateDate">CreateDate to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.RequestList.FindByStatusId(System.Int16)">
            <summary>Finds the first <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> from a given <paramref name="aStatusId"/>
            </summary>
            <param name="aStatusId">StatusId to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.RequestList.FindAllByStatusId(System.Int16)">
            <summary>Finds all <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> from a given <paramref name="aStatusId"/>
            </summary>
            <param name="aStatusId">StatusId to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.RequestList.FindByLastStatusUpdate(System.DateTime)">
            <summary>Finds the first <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> from a given <paramref name="aLastStatusUpdate"/>
            </summary>
            <param name="aLastStatusUpdate">LastStatusUpdate to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.RequestList.FindAllByLastStatusUpdate(System.DateTime)">
            <summary>Finds all <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> from a given <paramref name="aLastStatusUpdate"/>
            </summary>
            <param name="aLastStatusUpdate">LastStatusUpdate to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.RequestList.FindByDeletableOn(System.Nullable{System.DateTime})">
            <summary>Finds the first <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> from a given <paramref name="aDeletableOn"/>
            </summary>
            <param name="aDeletableOn">DeletableOn to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.RequestList.FindAllByDeletableOn(System.Nullable{System.DateTime})">
            <summary>Finds all <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> from a given <paramref name="aDeletableOn"/>
            </summary>
            <param name="aDeletableOn">DeletableOn to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.RequestList.FindByNotifyOnUploadOkId(System.Nullable{System.Int32})">
            <summary>Finds the first <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> from a given <paramref name="aNotifyOnUploadOkId"/>
            </summary>
            <param name="aNotifyOnUploadOkId">NotifyOnUploadOkId to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.RequestList.FindAllByNotifyOnUploadOkId(System.Nullable{System.Int32})">
            <summary>Finds all <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> from a given <paramref name="aNotifyOnUploadOkId"/>
            </summary>
            <param name="aNotifyOnUploadOkId">NotifyOnUploadOkId to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.SinkList">
            <summary>List of <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink"/> elements 
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.SinkList.FindBySinkId(System.Int32)">
            <summary>Finds the first <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink"/> from a given <paramref name="aSinkId"/>
            </summary>
            <param name="aSinkId">SinkId to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.SinkList.FindAllBySinkId(System.Int32)">
            <summary>Finds all <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink"/> from a given <paramref name="aSinkId"/>
            </summary>
            <param name="aSinkId">SinkId to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.SinkList.FindByHostCategory(System.String)">
            <summary>Finds the first <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink"/> from a given <paramref name="aHostCategory"/>
            </summary>
            <param name="aHostCategory">HostCategory to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.SinkList.FindAllByHostCategory(System.String)">
            <summary>Finds all <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink"/> from a given <paramref name="aHostCategory"/>
            </summary>
            <param name="aHostCategory">HostCategory to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.SinkList.FindByBaseUrl(System.String)">
            <summary>Finds the first <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink"/> from a given <paramref name="aBaseUrl"/>
            </summary>
            <param name="aBaseUrl">BaseUrl to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.SinkList.FindAllByBaseUrl(System.String)">
            <summary>Finds all <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink"/> from a given <paramref name="aBaseUrl"/>
            </summary>
            <param name="aBaseUrl">BaseUrl to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.SinkList.FindByName(System.String)">
            <summary>Finds the first <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink"/> from a given <paramref name="aName"/>
            </summary>
            <param name="aName">Name to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.SinkList.FindAllByName(System.String)">
            <summary>Finds all <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink"/> from a given <paramref name="aName"/>
            </summary>
            <param name="aName">Name to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.SinkList.FindByUsername(System.String)">
            <summary>Finds the first <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink"/> from a given <paramref name="aUsername"/>
            </summary>
            <param name="aUsername">Username to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.SinkList.FindAllByUsername(System.String)">
            <summary>Finds all <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink"/> from a given <paramref name="aUsername"/>
            </summary>
            <param name="aUsername">Username to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.SinkList.FindByPassword(System.String)">
            <summary>Finds the first <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink"/> from a given <paramref name="aPassword"/>
            </summary>
            <param name="aPassword">Password to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.SinkList.FindAllByPassword(System.String)">
            <summary>Finds all <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Sink"/> from a given <paramref name="aPassword"/>
            </summary>
            <param name="aPassword">Password to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.StatusList">
            <summary>List of <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status"/> elements 
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.StatusList.FindByStatusId(System.Int16)">
            <summary>Finds the first <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status"/> from a given <paramref name="aStatusId"/>
            </summary>
            <param name="aStatusId">StatusId to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.StatusList.FindAllByStatusId(System.Int16)">
            <summary>Finds all <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status"/> from a given <paramref name="aStatusId"/>
            </summary>
            <param name="aStatusId">StatusId to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.StatusList.FindByName(System.String)">
            <summary>Finds the first <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status"/> from a given <paramref name="aName"/>
            </summary>
            <param name="aName">Name to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.StatusList.FindAllByName(System.String)">
            <summary>Finds all <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status"/> from a given <paramref name="aName"/>
            </summary>
            <param name="aName">Name to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.StatusList.FindByDescription(System.String)">
            <summary>Finds the first <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status"/> from a given <paramref name="aDescription"/>
            </summary>
            <param name="aDescription">Description to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.StatusList.FindAllByDescription(System.String)">
            <summary>Finds all <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status"/> from a given <paramref name="aDescription"/>
            </summary>
            <param name="aDescription">Description to find</param>
            <returns>The first found object that matches the argument, or <see langword="null"/> if not found</returns>
        </member>
        <member name="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status">
            <summary>This object represents the properties and methods of a the table Status.
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.FIELD_NAMES">
            <summary>Comma separated list with all fields that are contained in the class. This also contains identity and computed fields.
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.FIELD_NAMES_WITH_ALIAS">
            <summary>Comma separated list with all fields that are contained in the class with table name as alias.This also contains identity and computed fields.
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.DEFAULT_ALIAS">
            <summary>table name used as alias in the <see cref="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.FIELD_NAMES_WITH_ALIAS"/> const
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.FIELD_NAMES_WITHOUT_PRIMARY">
            <summary>Comma separated list with all fields (except the primary key and the computed columns) that are contained in the class 
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.FIELD_NAMES_ARRAY">
            <summary><see cref="T:System.Array"/> with all fields that are contained in the class 
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.FIELD_NAMES_WITHOUT_PRIMARY_ARRAY">
            <summary><see cref="T:System.Array"/> with all fields (except the primary key and the computed columns) that are contained in the class 
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.FROM_TABLE_FULL_NAME">
            <summary>Constant that contains the table name for the FROM Statement
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.FROM_TABLE_FULL_NAME_WITH_DEFAULT_ALIAS">
            <summary>Constant that contains the table name for the FROM Statement
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.SCHEMA_NAME">
            <summary>Constant that contains the name of the Schema where the table resists
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.TABLE_NAME">
            <summary>Constant that contains the table name for the FROM Statement
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.STATUSID_FIELD_NAME">
            <summary>Constant that represents the field name corresponding to the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.StatusId"/> property
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.NAME_FIELD_NAME">
            <summary>Constant that represents the field name corresponding to the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.Name"/> property
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.DESCRIPTION_FIELD_NAME">
            <summary>Constant that represents the field name corresponding to the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.Description"/> property
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.NOT_CREATED_ON_DATABASE_ID">
            <summary>Id of a object that has not been created on the database. If first time saved
              the object will become a different id
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.GetFromWithAlias(System.String)">
            <summary>Gets the from clause with a defined alias. If just a common alias is used there is a constant
              to get a default aliased list of fields <see cref="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.FIELD_NAMES_WITH_ALIAS"/>
            </summary>
            <param name="aAlias">Alias to be used</param>
            <returns>List of field names with the alias</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.#ctor(Sensirion.Data.DB.IExecuteQuery)">
            <summary>Creates a new instance 
            </summary>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.#ctor(System.Int16,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Creates a new instance and reads the data row with the submitted <paramref name="aId"/> into the instance 
            </summary>
            <param name="aId">Id of the data row (primary key)</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <exception cref="T:System.Data.DataException">Thrown if a element with the given id does not exists on the database</exception>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.#ctor(System.Data.SqlClient.SqlDataReader)">
            <summary>Reads the element from a reader submitted by the caller. The method 
               executes the <paramref name="aReader"/>.Read() Method to get the data row.
            </summary>
            <param name="aReader">Reader with data in it</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.LoadSingleRowFromReader(System.Data.SqlClient.SqlDataReader)">
            <summary>Loads a single row from a reader into the current item 
            </summary>
            <param name="aReader">Opened reader containing a row with the item data</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.LoadFromReader(System.Data.SqlClient.SqlDataReader,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Returns a list of <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status"/> objects that has been read from the submitted reader 
            </summary>
            <param name="aReader">Well configured reader with data rows in it</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>A list of <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status"/> objects</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.LoadCustomized(System.String,System.String,Sensirion.Data.DB.IExecuteQuery,Sensirion.Data.DB.SQLHelper.ParameterType[])">
            <summary>Returns a list of items. The caller can submit a customized from and where clause to select a specific set of items
            </summary>
            <param name="aCustomWhere">WHERE clause (can be submitted with or without the word 'WHERE')</param>
            <param name="aAdditionalFrom">Additional tables or joins to match the WHERE clause</param>
            <param name="aParameters"><see cref="T:System.Array"/> of parameters to customize the query if needed</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>A list containing all selected items</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.LoadCustomized(System.String,System.String,System.Int32,Sensirion.Data.DB.IExecuteQuery,Sensirion.Data.DB.SQLHelper.ParameterType[])">
            <summary>Returns a list of items. The caller can submit a customized from and where clause to select a specific set of items
            </summary>
            <param name="aCustomWhere">WHERE clause (can be submitted with or without the word 'WHERE')</param>
            <param name="aAdditionalFrom">Additional tables or joins to match the WHERE clause. The additional piece
              will be attached after the table name. So the first sign must be a semicolon
             </param>
            <param name="aParameters"><see cref="T:System.Array"/> of parameters to customize the query if needed</param>
            <param name="aCount">Count of max data rows to get (TOP Statement). If count is 0 or less no TOP Statement will be used</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>A list containing all selected items</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.LoadCustomized(System.String,System.String,System.Int32,Sensirion.Data.DB.IExecuteQuery,System.Boolean,Sensirion.Data.DB.SQLHelper.ParameterType[])">
            <summary>Returns a list of items. The caller can submit a customized from and where clause to select a specific set of items
            </summary>
            <param name="aCustomWhere">WHERE clause (can be submitted with or without the word 'WHERE')</param>
            <param name="aAdditionalFrom">Additional tables or joins to match the WHERE clause. The additional piece
              will be attached after the table name. So the first sign must be a semicolon
             </param>
            <param name="aParameters"><see cref="T:System.Array"/> of parameters to customize the query if needed</param>
            <param name="aCount">Count of max data rows to get (TOP Statement). If count is 0 or less no TOP Statement will be used</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <param name="aUseDistinct">If <see langword="true"/> the query will use the <c>SELECT DISTINCT</c> syntax</param>
            <returns>A list containing all selected items</returns>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.IsNew">
            <summary>Indicates whether the object is new or exists already on the database
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.Delete">
            <summary>Deletes the element from the database
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.Delete(System.Int16,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Deletes a element from the database 
            </summary>
            <param name="aId">Primary key of the object to delete</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.Update">
            <summary>Updates the element on the database with the new values 
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.Create">
            <summary>Creates a new <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status"/> in the Database and returns the identity column in the id property
            </summary>
            <exception cref="T:System.Data.MissingPrimaryKeyException">Thrown, if the identity could not read back</exception>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.NewStatus(System.Int16,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Creates a new item with the given id 
            </summary>
            <param name="aId">ID that the item should have</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>new empty instance (only id is set)</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.GetStatus(System.Int16,Sensirion.Data.DB.IExecuteQuery)">
            <summary>Reads an element from the database
            </summary>
            <param name="aId">Primary key of the element to read</param>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
            <returns>A <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status"/> object that represents the read element</returns>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status._StatusId">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.StatusId"/> Property.
            <para>Primary key
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.StatusId"/> field in the table t_Status</para>
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.StatusId">
            <summary>Primary key
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.StatusId"/> field in the table t_Status
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status._Name">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.Name"/> Property.
            <para>Status name
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.Name"/> field in the table t_Status</para>
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.Name">
            <summary>Status name
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.Name"/> field in the table t_Status
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status._Description">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.Description"/> Property.
            <para>Description
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.Description"/> field in the table t_Status</para>
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.Description">
            <summary>Description
              Represents the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.Description"/> field in the table t_Status
            </summary>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status._JobsWorkInProgress">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.JobsWorkInProgress"/> Property.
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.JobsWorkInProgress">
            <summary>Represents the items subordinated to the t_Status table
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.LoadAllWorkInProgressJob(System.Boolean)">
            <summary>Loads all the <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job"/> from the t_Status
            </summary>
            <param name="aDeep">True, if the depending elements will be loaded too</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.LoadAllWorkInProgressJob(System.Int32)">
            <summary>Loads all the <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Job"/> from the t_Status
            </summary>
            <param name="aDepth">Limits the level to load all depending objects (-1 means all, 0 means no objects).
              To load only the first level call it with 1.</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.AddNewWorkInProgressJob(Sensirion.Data.DB.IExecuteQuery)">
            <summary>Adds a new <c>WorkInProgress.Job</c> to the <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status"/>
            </summary>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
        </member>
        <member name="F:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status._RequestsWorkInProgress">
            <summary>Backing field for the <see cref="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.RequestsWorkInProgress"/> Property.
            </summary>
        </member>
        <member name="P:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.RequestsWorkInProgress">
            <summary>Represents the items subordinated to the t_Status table
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.LoadAllWorkInProgressRequest(System.Boolean)">
            <summary>Loads all the <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> from the t_Status
            </summary>
            <param name="aDeep">True, if the depending elements will be loaded too</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.LoadAllWorkInProgressRequest(System.Int32)">
            <summary>Loads all the <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Request"/> from the t_Status
            </summary>
            <param name="aDepth">Limits the level to load all depending objects (-1 means all, 0 means no objects).
              To load only the first level call it with 1.</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.AddNewWorkInProgressRequest(Sensirion.Data.DB.IExecuteQuery)">
            <summary>Adds a new <c>WorkInProgress.Request</c> to the <see cref="T:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status"/>
            </summary>
            <param name="aHelper">Used to access the database. Connection string must be provided in the helper</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.LoadAllDepending(System.Boolean)">
            <summary>Loads ALL Foreign Key related elements. This can be very time consuming
            </summary>
            <param name="aDeep"><see langword="true"/>, if depending elements of sub elements should be loaded too</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.LoadAllDepending(System.Int32)">
            <summary>Loads ALL Foreign Key related elements. This can be very time consuming
            </summary>
            <param name="aDepth">Limits the level to load all depending objects (-1 means all level)</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.Save(System.Int32)">
            <summary>Saves the Element to the db. If the element does not exists, a new data row will be
              inserted. Otherwise the existing row will be updated with the new values.
              <para>The element does not perform an update, if the modified flag is not <see langword="true"/>.
              </para>
            </summary>
            <param name="aDepth">Levels to be saved.
              <para>
                <list type="bullet">
                  <item>
                    <description>A Level of 0 means, that no dependent objects will be saved</description>
                  </item><item>
                    <description>Level of 1 means, all depending objects will be saved but not deep.</description>
                  </item><item>
                    <description>Level of two means, that all depending objects and all their depending objects will be saved.</description>
                  </item><item>
                    <description>Level of -1 means, that all depending objects will be saved deep (unlimited level).</description>
                  </item>
                </list>
              </para>
            </param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.UpdateDependentObjectsWithID(System.Int32)">
            <summary>Updates all depending objects with the ID of the current object 
            </summary>
            <param name="aDepth"><see langword="true"/>, if the depending elements will be updated too</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.ResetId(System.Int32)">
            <summary>Marks the object as new if it has not been loaded from database
              This can be useful, if a transaction has been rolled back and all the objects
              must be saved again. If some actions has been taken before and some objects got an Id
              they must be reseted to be new, because the received Id does not exists anymore
              on the database and a identity violation will occur if the object is saved again.
            </summary>
            <param name="aDepth">The level to which the reset will be done (-1 = all level)</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.WritePropertiesToStream(System.IO.MemoryStream)">
            <summary>Writes the binary representation of all db properties 
              to the passed <paramref name="aSerializeStream"/> for 
              the calculation of the hash. The calculation includes all
              NOT foreign key columns.
            </summary>
            <param name="aSerializeStream">Stream where the db properties 
              has to be serialized for hash calculation.
            </param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.GetDataAsArray">
            <summary>Get all data (without primary key and computed entries) as array.
            The order of the data in the array matches FIELD_NAMES_WITHOUT_PRIMARY_ARRAY.
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.Data.WorkInProgress.Status.GetDataColumnTypes">
            <summary>Get all column names (without primary key and computed entries) with their non-nullable data type.
            The order of the data in the array matches the FIELD_NAMES_WITHOUT_PRIMARY_ARRAY.
            </summary>
        </member>
        <member name="T:Sensirion.Hummer.DbAccess.FileExportRepository">
            <summary>The implementation of Db repository methods to handle the Hummer file export
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.FileExportRepository.#ctor(Sensirion.Data.DB.IExecuteQuery,Sensirion.Hummer.Interfaces.DataAction.IDateTimeProvider,Microsoft.Extensions.Logging.ILogger)">
            <summary> Constructor
            </summary>
            <param name="queryHelper">Query helper providing Db access</param>
            <param name="dateTimeService">A service to provide the current date and time</param>
            <param name="logger">The logger</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.FileExportRepository.GetFileShareInfo(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.FileExportRepository.SearchPendingJobBatch(System.Action{System.Collections.Generic.IReadOnlyList{Sensirion.Hummer.Interfaces.DataObject.IJob},System.Guid,System.String})">
            <inheritdoc />
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.FileExportRepository.GetRequestJobDetails(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.FileExportRepository.InsertNewRequestToQueue(System.String,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.FileExportRepository.InsertNewFileToQueue(Sensirion.Hummer.Interfaces.IFileInformation)">
            <inheritdoc />
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.FileExportRepository.SetRequestAndJobsStatusAsPending(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.FileExportRepository.AddNotificationToQueue(Sensirion.Hummer.Interfaces.INotificationInformation)">
            <inheritdoc />
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.FileExportRepository.SetRequestAndJobUploadFailed(System.Guid,Sensirion.Hummer.Interfaces.DataObject.IJob)">
            <inheritdoc />
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.FileExportRepository.SetJobUploadSuccess(Sensirion.Hummer.Interfaces.DataObject.IJob)">
            <inheritdoc />
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.FileExportRepository.SetRequestUploadSuccess(System.Guid,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.FileExportRepository.SetJobInProgress(Sensirion.Hummer.Interfaces.DataObject.IJob)">
            <inheritdoc />
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.FileExportRepository.SetJobNotFound(Sensirion.Hummer.Interfaces.DataObject.IJob)">
            <inheritdoc />
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.FileExportRepository.SetupJobForRetry(Sensirion.Hummer.Interfaces.DataObject.IJob)">
            <inheritdoc />
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.FileExportRepository.SearchDeletableJobBatch(System.Action{System.Collections.Generic.IReadOnlyList{Sensirion.Hummer.Interfaces.DataObject.IJob},System.Guid,System.String})">
            <inheritdoc />
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.FileExportRepository.SetJobDeleting(Sensirion.Hummer.Interfaces.DataObject.IJob)">
            <inheritdoc />
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.FileExportRepository.SetRequestAndJobDeletionFailed(System.Guid,Sensirion.Hummer.Interfaces.DataObject.IJob)">
            <inheritdoc />
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.FileExportRepository.SetRequestDeletionSuccess(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.FileExportRepository.SetJobDeletionSuccess(Sensirion.Hummer.Interfaces.DataObject.IJob)">
            <inheritdoc />
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.FileExportRepository.GetFileShareInfo(System.Guid)">
            <summary>
            Get the app configuration for the file share used to export data.
            </summary>
            <param name="requestId">The request identifier</param>
            <returns>The file share information, or null if the configuration was not found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.FileExportRepository.GetOnePendingRequestAndMarkAsInProgress">
            <summary>
            Select one request ready to be dispatched without specifying the order. If there are none, return null.
            Otherwise, mark that the processing of the request is in progress.
            </summary>
            <returns>The pending request identifier or null if none is found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.FileExportRepository.GetOneRequestAwaitingDeletionAndSetDeleting">
            <summary>
            Get one request that was completed some time ago.
            </summary>
            <returns>The identifier of the request waiting to be deleted, or null if none is found</returns>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.FileExportRepository.SetJobUploadResult(Sensirion.Hummer.Interfaces.DataObject.IJob,System.Boolean)">
            <summary>
            Set the upload success result of a job identified by <see cref="P:Sensirion.Hummer.Interfaces.DataObject.IJob.JobId"/>
            </summary>
            <param name="job">The job information</param>
            <param name="success">True if the upload was successful, false otherwise</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.FileExportRepository.SetRequestUploadResult(System.Guid,System.Boolean)">
            <summary>
            Set the upload success result of a request.
            </summary>
            <param name="guid">The request identifier</param>
            <param name="success">True if the upload was successful, false otherwise</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.FileExportRepository.EnableRequestDump(System.Guid)">
            <summary>
            Set the request data that enables the dumpster.  
            </summary>
            <param name="guid">The request identifier</param>
            <exception cref="T:System.NotSupportedException">If the request status is not <see cref="F:Sensirion.Hummer.Interfaces.DataObject.RequestStatus.UploadCompleted"/>. </exception>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.FileExportRepository.SetRequestDeletionResult(System.Guid,System.Boolean)">
            <summary>
            Set the deletion success result of a request.
            </summary>
            <param name="guid">The request identifier</param>
            <param name="success">A flag that is true if the request files were deleted</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.FileExportRepository.SetJobDeletionResult(Sensirion.Hummer.Interfaces.DataObject.IJob,System.Boolean)">
            <summary>
            Set the deletion success result of a job identified by <see cref="P:Sensirion.Hummer.Interfaces.DataObject.IJob.JobId"/>
            </summary>
            <param name="job">The job information</param>
            <param name="success">True if the deletion was successful, false otherwise</param>
        </member>
        <member name="T:Sensirion.Hummer.DbAccess.MessageStreamingRepository">
            <summary>The implementation of <see cref="T:Sensirion.Hummer.Interfaces.DataAction.IMessageStreamingRepository"/>
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.MessageStreamingRepository.#ctor(Sensirion.Data.DB.IExecuteQuery)">
            <summary>
            Constructor.
            </summary>
            <param name="queryHelper">Creates the query helper to use</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.MessageStreamingRepository.GetConfiguredSinks(System.String,System.String)">
            <summary>
            Query the information necessary to route a message from the given origin to the desired destinations.
            </summary>
            <param name="appKey">Application identifier</param>
            <param name="dataMeaning">Label for the data</param>
            <returns>The list of sinks</returns>
            <exception cref="T:System.ArgumentNullException">If the appKey is null.</exception>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.MessageStreamingRepository.GetNotificationOnSuccessIfConfigured(System.Guid)">
            <inheritdoc />
        </member>
        <member name="T:Sensirion.Hummer.DbAccess.RetryQueryHelper">
            <summary>Functions to apply a retry strategy to DB queries in case of connection errors
            </summary>
        </member>
        <member name="T:Sensirion.Hummer.DbAccess.SQLHelperFactory">
            <summary> Creates new <see cref="T:Sensirion.Data.DB.SQLHelper"/> objects. 
            </summary>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.SQLHelperFactory.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="connectionString">The DB connection string.</param>
        </member>
        <member name="M:Sensirion.Hummer.DbAccess.SQLHelperFactory.Create">
            <inheritdoc />
        </member>
    </members>
</doc>
